{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { AppBar, Toolbar, Link, List, ListItem, makeStyles, Typography, IconButton } from \"@material-ui/core\";\nimport { Menu as IconMenu } from '@material-ui/icons';\nimport { getPageUrl } from \"../../helpers/postHelper\";\nimport { useRouter } from \"next/router\";\nimport menuStyle from './menu.module.scss';\nimport { useEffect, useState } from \"react\";\nimport { MenuItemType } from \"../../data\";\nimport { getImageUrl } from \"../../helpers/imageHelper\";\nimport { sortedArray } from \"../../helpers/arrayHelper\";\nimport constants from \"../../constants\";\n\nconst getBackgroundColor = () => {\n  var _window;\n\n  return ((_window = window) === null || _window === void 0 ? void 0 : _window.pageYOffset) > 60 ? '#393745' : 'transparent';\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    background: 'transparent'\n  }\n}));\nconst useFixedToolbarStyles = makeStyles(theme => ({\n  root: {\n    background: '#393745'\n  }\n}));\nconst useNavStyles = makeStyles(theme => ({\n  root: {\n    padding: '0 1rem'\n  }\n}));\nconst useListStyles = makeStyles(theme => ({\n  root: {\n    padding: 0\n  }\n}));\n\nconst MenuItem = ({\n  item,\n  isSubMenuItem = false\n}) => {\n  var _item$menuitems$lengt, _item$menuitems;\n\n  const router = useRouter();\n  const {\n    0: expanded,\n    1: setExpanded\n  } = useState(false);\n\n  const buildSubMenu = (item, expanded) => {\n    var _sortedArray;\n\n    return __jsx(\"div\", {\n      className: `dropdown-menu ${menuStyle['custom-dropdown-menu']} ${expanded ? 'show' : ''}`,\n      \"aria-labelledby\": \"navbarDropdownMenuLink\",\n      key: `sub-menu-dropdown-${item.id}`\n    }, __jsx(\"ul\", {\n      className: menuStyle['custom-dropdown-menu-list']\n    }, (_sortedArray = sortedArray(item.menuitems, 'title')) === null || _sortedArray === void 0 ? void 0 : _sortedArray.map(subItem => __jsx(MenuItem, {\n      key: `sub-menu-item-${subItem.id}`,\n      item: subItem,\n      isSubMenuItem: true\n    }))));\n  };\n\n  const showDropDown = () => {\n    setExpanded(true);\n  };\n\n  const hideDropDown = () => {\n    setExpanded(false);\n  };\n\n  const toggleDropDown = () => {\n    setExpanded(!expanded);\n  };\n\n  const linkUrl = getPageUrl(item);\n  const isActiveLink = linkUrl === `${constants.BASE_URL}${router === null || router === void 0 ? void 0 : router.asPath}`;\n  const isDropDown = item.type === MenuItemType.section || ((_item$menuitems$lengt = (_item$menuitems = item.menuitems) === null || _item$menuitems === void 0 ? void 0 : _item$menuitems.length) !== null && _item$menuitems$lengt !== void 0 ? _item$menuitems$lengt : 0) > 0;\n  return __jsx(ListItem, {\n    onMouseEnter: isDropDown ? () => showDropDown() : null,\n    onMouseLeave: isDropDown ? () => hideDropDown() : null,\n    className: `${isSubMenuItem ? menuStyle['sub-list-item'] : menuStyle['list-item']} ${isActiveLink ? menuStyle['active'] : ''} ${isDropDown ? 'dropdown' : ''}`\n  }, __jsx(Link, {\n    className: menuStyle['link'],\n    href: linkUrl\n  }, item.title), isDropDown ? buildSubMenu(item, expanded) : null);\n};\n\nconst Menu = ({\n  logo,\n  projectHeader,\n  institutionHeader,\n  institutionLogo,\n  institutionUrl,\n  menuItems,\n  isSubMenuItem = false,\n  fixed = false,\n  transparent = false,\n  showDrawerToggleButton = false,\n  handleOpenDrawer = open => null\n}) => {\n  var _sortedArray2;\n\n  const router = useRouter();\n  const {\n    0: scrolled,\n    1: setScrolled\n  } = useState(false);\n  const {\n    0: menuExpanded,\n    1: setMenuExpanded\n  } = useState(false);\n  const toolbarClasses = !fixed || scrolled ? useFixedToolbarStyles() : useToolbarStyles();\n  const navClasses = useNavStyles();\n  const listClasses = useListStyles();\n\n  const buildMenuItem = item => __jsx(MenuItem, {\n    item: item,\n    key: `menu-item-${item.id}`\n  });\n\n  const toggleMenu = () => {\n    setMenuExpanded(!menuExpanded);\n  };\n\n  const _listenForScroll = () => {\n    if (!!window) {\n      window.addEventListener('scroll', _onScrollTrigger);\n    }\n  };\n\n  const _onScrollTrigger = () => {\n    var _window$pageYOffset, _window2;\n\n    setScrolled(((_window$pageYOffset = (_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.pageYOffset) !== null && _window$pageYOffset !== void 0 ? _window$pageYOffset : 0) > 60);\n  };\n\n  useEffect(() => {\n    _listenForScroll();\n\n    return () => {\n      window.removeEventListener('scroll', _onScrollTrigger);\n    };\n  }, []);\n  const appBarClasses = `${fixed ? menuStyle['fixed-header'] : menuStyle['default-header']} ${fixed && transparent && !scrolled ? menuStyle['transparent'] : ''}`;\n  const hasInstitutionLogo = !!institutionLogo;\n  const hasInstitutionUrl = !!institutionUrl;\n  return __jsx(AppBar, {\n    position: \"relative\",\n    className: appBarClasses\n  }, __jsx(Toolbar, {\n    className: menuStyle['custom-menu-toolbar']\n  }, __jsx(\"nav\", {\n    className: `navbar navbar-dark navbar-expand-lg ${menuStyle['menu-navbar']}`\n  }, __jsx(\"div\", {\n    className: \"container-fluid\"\n  }, showDrawerToggleButton ? __jsx(IconButton, {\n    style: {\n      marginRight: 10,\n      outline: 'none'\n    },\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: () => handleOpenDrawer(true),\n    edge: \"start\"\n  }, __jsx(IconMenu, null)) : null, hasInstitutionLogo && hasInstitutionUrl ? __jsx(\"a\", {\n    className: `navbar-brand ${menuStyle['custom-navbar-brand']}`,\n    href: institutionUrl,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: menuStyle['custom-navbar-logo-container']\n  }, __jsx(\"img\", {\n    src: getImageUrl(institutionLogo),\n    className: menuStyle['custom-navbar-logo']\n  }))) : __jsx(\"div\", null, hasInstitutionLogo ? __jsx(\"div\", {\n    className: menuStyle['custom-navbar-logo-container']\n  }, __jsx(\"img\", {\n    src: getImageUrl(institutionLogo)\n  })) : null), projectHeader ? __jsx(\"a\", {\n    className: `navbar-brand ${menuStyle['custom-navbar-brand']}`,\n    href: getPageUrl('/'),\n    style: {\n      marginRight: 20\n    }\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    className: menuStyle['header-project-label']\n  }, projectHeader)) : null, __jsx(\"button\", {\n    className: `navbar-toggler ${menuStyle['custom-navbar-toggler']}`,\n    type: \"button\",\n    \"data-toggle\": \"collapse\",\n    \"data-target\": \"#navbarNav\",\n    \"aria-controls\": \"navbarNav\",\n    \"aria-expanded\": \"false\",\n    \"aria-label\": \"Toggle navigation\"\n  }, __jsx(\"span\", {\n    className: \"navbar-toggler-icon\",\n    onClick: () => toggleMenu()\n  })), __jsx(\"div\", {\n    className: `collapse navbar-collapse ${menuExpanded ? 'show' : ''}`,\n    id: \"navbarNav\"\n  }, __jsx(List, {\n    className: \"navbar-nav ml-auto\",\n    classes: listClasses\n  }, (_sortedArray2 = sortedArray(menuItems, 'order')) === null || _sortedArray2 === void 0 ? void 0 : _sortedArray2.map(item => buildMenuItem(item))))))));\n};\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}
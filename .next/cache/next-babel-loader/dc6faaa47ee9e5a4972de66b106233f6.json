{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { connect } from 'react-redux';\nimport { Typography } from \"@material-ui/core\";\nimport Lightbox from \"react-image-lightbox\";\nimport { CloudDownload as IconDownload } from \"@material-ui/icons\";\nimport Spinner from \"../../components/spinner/spinner\";\nimport PageContainer from \"../../components/page/pageContainer\";\nimport { MorphologyCard } from \"../../components/cards/morphologyCard\";\nimport { ElectrophysiologyCard } from \"../../components/cards/electrophysiologyCard\";\nimport { ConnectionCard } from \"../../components/cards/connectionCard\";\nimport { CustomButton } from \"../../components/buttons/buttons\";\nimport { clear, setMorphology, removeModFile, removeElectrophysiology, addElectrophysiology } from \"../../actions/hodgkinHuxley.actions\";\nimport { getFilters, searchDatasets, downloadAllDatasets, downloadDatasets, getTypes, checkMorphologyForShow } from \"../../helpers/apiHelper\";\nimport { FormFilter } from \"../../components/forms/filter\";\nimport constants from \"../../constants\";\nimport pageContentStyle from '../page.module.scss';\nimport { ItemsCountBaloon } from \"../../components/baloons/itemsCountBaloon\";\nimport { MorphologyViewerDialog } from \"../../components/dialogs/morphologyViewerDialog\";\nimport { HodgkinHuxleyBaloon } from \"../../components/hodgkin-huxley-baloon\";\nimport { AgreeDownloadDialog } from \"../../components/dialogs/agreeDownloadDialog\";\nimport { downloadFile } from \"../../helpers/downloadHelper\";\nimport 'react-image-lightbox/style.css';\nimport { AlertDialog } from \"../../components/dialogs/alertDialog\";\nimport { hashCode } from \"../../helpers/hashHelper\";\nimport { dataTypes } from \"../../constants/constants\";\nconst _typeCards = {\n  'morphology': MorphologyCard,\n  'electrophysiology': ElectrophysiologyCard,\n  'connection': ConnectionCard\n};\n\nconst lightboxStyles = () => {\n  var _window$pageYOffset, _window;\n\n  return {\n    content: {\n      top: ((_window$pageYOffset = (_window = window) === null || _window === void 0 ? void 0 : _window.pageYOffset) !== null && _window$pageYOffset !== void 0 ? _window$pageYOffset : 0) > 60 ? 0 : 60\n    }\n  };\n};\n\nconst neurmorphoSource = 'neuromorpho';\n\nconst _DataPage = props => {\n  var _page$variant;\n\n  const [loading, setLoading] = React.useState(true);\n  const [page, setPage] = React.useState({});\n  const [dataSets, setDataSets] = React.useState([]);\n  const [filters, setFilters] = React.useState(null);\n  const [selectedFilters, setSelectedFilters] = React.useState(null);\n  const [selectedQuery, setSelectedQuery] = React.useState('');\n  const [selectedForDownloads, setSelectedForDownloads] = React.useState([]);\n  const [numPage, setNumPage] = React.useState(0);\n  const [totalPages, setTotalPages] = React.useState(1);\n  const [totalItems, setTotalItems] = React.useState(0);\n  const [hitsPerPage, setHitsPerPage] = React.useState(constants.DEFAULT_HITS_PER_PAGE);\n  const [openMorphologyViewer, setOpenMorphologyViewer] = React.useState(false);\n  const [openAgreeDownloadDialog, setOpenAgreeDownloadDialog] = React.useState(false);\n  const [selectedMorphologyViewerModel, setSelectedMorphologyViewerModel] = React.useState(null);\n  const acceptDownloadCallback = React.useRef(() => null);\n  const [openAlertDialog, setOpenAlertDialog] = React.useState(false);\n  const [alertDialogMessage, setAlertDialogMessage] = React.useState(null);\n  const [lightboxImg, setLightboxImg] = React.useState(null);\n  const {\n    params,\n    selectedMorphologyForBuilding,\n    selectedElectrophysiologiesForBuilding,\n    selectedModFilesForBuilding,\n    setMorphologyForBuilding,\n    addElectrophysiologyForBuilding,\n    removeElectrophysiologyForBuilding,\n    removeModFileForBuilding,\n    clearHodgkinHuxley\n  } = props;\n  const router = useRouter();\n  useEffect(() => {\n    setup();\n  }, []);\n  useEffect(() => {\n    if (!openMorphologyViewer) {\n      setSelectedMorphologyViewerModel(null);\n    }\n  }, [openMorphologyViewer]);\n\n  const setup = async () => {\n    try {\n      var _url$searchParams, _query$trim;\n\n      //const _page = await getPage('data');\n      const url = new URL(window.location.href);\n      const query = url === null || url === void 0 ? void 0 : (_url$searchParams = url.searchParams) === null || _url$searchParams === void 0 ? void 0 : _url$searchParams.get('query');\n\n      const _filters = await getFilters({\n        indexName: 'dataset',\n        type: params === null || params === void 0 ? void 0 : params.type\n      });\n\n      if (!!query && (query === null || query === void 0 ? void 0 : (_query$trim = query.trim()) === null || _query$trim === void 0 ? void 0 : _query$trim.length) > 0) {\n        var _params$type;\n\n        setSelectedQuery(query);\n        await _search({\n          data_type: (_params$type = params === null || params === void 0 ? void 0 : params.type) !== null && _params$type !== void 0 ? _params$type : null,\n          query,\n          filters: selectedFilters,\n          page: numPage\n        });\n      } else {\n        var _params$type2;\n\n        const {\n          total_page: _totalPages,\n          total: _totalItems,\n          items\n        } = await searchDatasets({\n          data_type: (_params$type2 = params === null || params === void 0 ? void 0 : params.type) !== null && _params$type2 !== void 0 ? _params$type2 : null,\n          query: selectedQuery,\n          filters: selectedFilters,\n          page: numPage\n        });\n        setTotalPages(_totalPages);\n        setTotalItems(_totalItems);\n        setDataSets(items);\n      }\n\n      setFilters(_filters);\n      setLoading(false);\n    } catch (error) {}\n  };\n\n  const _onChangeFilters = (key, value) => {\n    if (!!key) {\n      var _selectedFilters$pref;\n\n      if (key.split('.').length === 1) {\n        setSelectedFilters(_objectSpread(_objectSpread({}, selectedFilters), {}, {\n          [key]: value\n        }));\n        return;\n      }\n\n      const prefixKey = key.split('.')[0];\n      const itemKey = key.split('.')[1];\n      const prefixKeyValue = !!selectedFilters ? (_selectedFilters$pref = selectedFilters[prefixKey]) !== null && _selectedFilters$pref !== void 0 ? _selectedFilters$pref : {} : {};\n      setSelectedFilters(_objectSpread(_objectSpread({}, selectedFilters), {}, {\n        [prefixKey]: _objectSpread(_objectSpread({}, prefixKeyValue), {}, {\n          [itemKey]: value\n        })\n      }));\n    }\n  };\n\n  const _onChangeQuery = async query => {\n    var _query$trim2;\n\n    setSelectedQuery(query);\n\n    if ((query === null || query === void 0 ? void 0 : (_query$trim2 = query.trim()) === null || _query$trim2 === void 0 ? void 0 : _query$trim2.length) < constants.MIN_SEARCH_LENGTH) {\n      await _search({\n        query\n      });\n    }\n  };\n\n  const _search = async ({\n    query,\n    filters,\n    hitsPerPage\n  } = {}) => {\n    var _params$type3;\n\n    console.log('@@@@requestSearch');\n    const page = 0;\n    setNumPage(0);\n    setLoading(true);\n\n    const _filters = filters !== undefined ? filters : selectedFilters;\n\n    const {\n      total_page: _totalPages,\n      total: _totalItems,\n      items\n    } = await searchDatasets({\n      data_type: (_params$type3 = params === null || params === void 0 ? void 0 : params.type) !== null && _params$type3 !== void 0 ? _params$type3 : null,\n      query: query !== null && query !== void 0 ? query : selectedQuery,\n      filters: _filters,\n      page,\n      hitsPerPage\n    });\n    console.log('@@@@@@@totalPages', _totalPages);\n    console.log('@@@@@@@totalItems', _totalItems);\n    setDataSets(items);\n    setTotalPages(_totalPages);\n    setTotalItems(_totalItems);\n    setLoading(false);\n  };\n\n  const _loadMore = async () => {\n    var _params$type4;\n\n    const page = numPage + 1;\n    setNumPage(page);\n    setLoading(true);\n    const {\n      total_page: _totalPages,\n      total: _totalItems,\n      items\n    } = await searchDatasets({\n      data_type: (_params$type4 = params === null || params === void 0 ? void 0 : params.type) !== null && _params$type4 !== void 0 ? _params$type4 : null,\n      query: selectedQuery,\n      filters: selectedFilters,\n      hitsPerPage,\n      page\n    });\n    const allDataSets = [...dataSets, ...items];\n    setDataSets(allDataSets);\n    setTotalItems(_totalItems);\n    setTotalPages(_totalPages);\n    setLoading(false);\n  };\n\n  const _onHitsPerPageChange = async value => {\n    setHitsPerPage(value);\n    await _search({\n      hitsPerPage: value\n    });\n  };\n\n  const _applyFilters = async () => {\n    await _search();\n  };\n\n  const _resetFilters = async () => {\n    setSelectedFilters(null);\n    await _search({\n      query: '',\n      filters: null\n    });\n  };\n\n  const _downloadAll = () => {\n    _askForDownload({\n      all: true,\n      callback: () => {\n        window.open(downloadAllDatasets(params === null || params === void 0 ? void 0 : params.type));\n      }\n    });\n  };\n\n  const _downloadSelectedDatasets = () => {\n    _askForDownload({\n      all: true,\n      callback: () => {\n        window.open(downloadDatasets(selectedForDownloads));\n      }\n    });\n  };\n\n  const _openMorphologyViewer = async ({\n    modelName,\n    modelUrl,\n    detailPage\n  }) => {\n    if (!(await checkMorphologyForShow(modelUrl))) {\n      _openAlertDialog(`The current morphology cannot be visualized in this viewer.<br/>Please visit the source <a href=\"${detailPage}\" target=\"_blank\">web page</a> of the morphology for further details.`);\n    } else {\n      setSelectedMorphologyViewerModel({\n        modelName,\n        modelUrl\n      });\n      setOpenMorphologyViewer(true);\n    }\n  };\n\n  const _closeMorphologyViewer = () => {\n    setOpenMorphologyViewer(false);\n  };\n\n  const _openAlertDialog = message => {\n    setOpenAlertDialog(true);\n    setAlertDialogMessage(message);\n    return;\n  };\n\n  const _closeAlertDialog = () => {\n    setOpenAlertDialog(false);\n    setAlertDialogMessage(null);\n  };\n\n  const _onCloseLightBox = () => {\n    setLightboxImg(null);\n  };\n\n  const _toggleSelectForDownload = async (id, selected) => {\n    console.log('@@@@@@@toggleSelectForDownload', id, selected);\n\n    if (selected) {\n      const newValues = [...selectedForDownloads];\n      newValues.push(id);\n      setSelectedForDownloads(newValues);\n    } else {\n      const newValues = [...selectedForDownloads];\n      const elIndex = newValues.indexOf(id);\n\n      if (elIndex > -1) {\n        newValues.splice(elIndex, 1);\n        setSelectedForDownloads(newValues);\n      }\n    }\n  };\n\n  const _toggleElectrophysiologyForBuilding = selectedItem => {\n    const index = (selectedElectrophysiologiesForBuilding !== null && selectedElectrophysiologiesForBuilding !== void 0 ? selectedElectrophysiologiesForBuilding : []).findIndex(item => hashCode(JSON.stringify(selectedItem)) === hashCode(JSON.stringify(item)));\n\n    if (index === -1) {\n      addElectrophysiologyForBuilding(selectedItem);\n    } else {\n      removeElectrophysiologyForBuilding(selectedItem);\n    }\n  };\n\n  const _selectForModelBuilding = item => {\n    if (!!item) {\n      if ((item === null || item === void 0 ? void 0 : item.type) === dataTypes.morphology) {\n        setMorphologyForBuilding(!!item ? {\n          name: item === null || item === void 0 ? void 0 : item.name,\n          url: item === null || item === void 0 ? void 0 : item.download_link\n        } : null);\n      } else if ((item === null || item === void 0 ? void 0 : item.type) === dataTypes.electrophysiology) {\n        var _item$metadata;\n\n        _toggleElectrophysiologyForBuilding({\n          name: item === null || item === void 0 ? void 0 : item.name,\n          url: item === null || item === void 0 ? void 0 : item.download_link,\n          metadata: (_item$metadata = item === null || item === void 0 ? void 0 : item.metadata) !== null && _item$metadata !== void 0 ? _item$metadata : null\n        });\n      }\n    }\n  };\n\n  const _askForDownload = ({\n    url,\n    callback,\n    source,\n    all = false\n  }) => {\n    if (!!source && (source === null || source === void 0 ? void 0 : source.toLowerCase()) === neurmorphoSource || all) {\n      if (!!url && url.trim().length > 0) {\n        acceptDownloadCallback.current = () => downloadFile(url);\n      } else if (!!callback) {\n        acceptDownloadCallback.current = callback;\n      }\n\n      setOpenAgreeDownloadDialog(true);\n    } else {\n      if (!!url && url.trim().length > 0) {\n        downloadFile(url);\n      } else if (!!callback) {\n        callback();\n      }\n    }\n  };\n\n  const _acceptDownloadCallback = () => {\n    setOpenAgreeDownloadDialog(false);\n\n    if (!!(acceptDownloadCallback === null || acceptDownloadCallback === void 0 ? void 0 : acceptDownloadCallback.current)) {\n      acceptDownloadCallback === null || acceptDownloadCallback === void 0 ? void 0 : acceptDownloadCallback.current();\n      acceptDownloadCallback.current = null;\n    }\n  };\n\n  const _cancelDownloadCallback = () => {\n    setOpenAgreeDownloadDialog(false);\n\n    if (!!(acceptDownloadCallback === null || acceptDownloadCallback === void 0 ? void 0 : acceptDownloadCallback.current)) {\n      acceptDownloadCallback.current = null;\n    }\n  };\n\n  const _getDataTypeLabel = type => {\n    var _constants$DATA_TYPE_;\n\n    return (_constants$DATA_TYPE_ = constants.DATA_TYPE_LABELS[type]) !== null && _constants$DATA_TYPE_ !== void 0 ? _constants$DATA_TYPE_ : type;\n  };\n\n  const hasMoreItems = numPage < totalPages - 1;\n  const hasData = !!dataSets && dataSets.length > 0;\n  const hasDownloadableFiles = !!dataSets && dataSets.length > 0 && dataSets.filter(item => !!item.download_link).length > 0;\n  const CardType = _typeCards[params === null || params === void 0 ? void 0 : params.type];\n  const countBaloonClassName = !!hasDownloadableFiles && !!selectedForDownloads && selectedForDownloads.length > 0 ? 'col-md-6' : 'col-md-8';\n  const downloadBlockClassName = !!hasDownloadableFiles && !!selectedForDownloads && selectedForDownloads.length > 0 ? 'col-md-6' : 'col-md-4';\n  const pageVariant = (_page$variant = page === null || page === void 0 ? void 0 : page.variant) !== null && _page$variant !== void 0 ? _page$variant : 'dark';\n  return __jsx(PageContainer, {\n    variant: pageVariant,\n    mainClassName: 'with-fixed-header',\n    fixedHeader: true\n  }, __jsx(\"div\", {\n    className: `container ${pageContentStyle['page-container']}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: pageContentStyle['page-header-label']\n  }, `DATA > ${_getDataTypeLabel(params === null || params === void 0 ? void 0 : params.type)}`))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, page === null || page === void 0 ? void 0 : page.content)), __jsx(\"section\", null, __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(FormFilter, {\n    variant: pageVariant,\n    query: selectedQuery,\n    filters: filters,\n    selectedFilters: selectedFilters,\n    selectedHitsPerPage: hitsPerPage,\n    onQueryChange: value => _onChangeQuery(value),\n    onRequestSearch: () => _search(),\n    onChangeHitsPerPage: value => _onHitsPerPageChange(value),\n    onChangeFilters: (key, value) => _onChangeFilters(key, value),\n    applyFilters: () => _applyFilters(),\n    resetFilters: () => _resetFilters()\n  }))), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: countBaloonClassName\n  }, __jsx(ItemsCountBaloon, {\n    label: \"Total items\",\n    count: totalItems\n  })), __jsx(\"div\", {\n    className: `${downloadBlockClassName} text-right`\n  }, !!selectedForDownloads && selectedForDownloads.length > 0 ? __jsx(CustomButton, {\n    onClick: () => _downloadSelectedDatasets(),\n    style: {\n      float: 'right',\n      marginRight: 10,\n      fontSize: 16\n    }\n  }, __jsx(IconDownload, null), \" \", __jsx(\"span\", {\n    style: {\n      marginLeft: 5\n    }\n  }, \"Download Selected\")) : null)), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(HodgkinHuxleyBaloon, {\n    variant: pageVariant,\n    morphology: selectedMorphologyForBuilding,\n    electrophysiologies: selectedElectrophysiologiesForBuilding,\n    modFiles: selectedModFilesForBuilding,\n    removeMorphology: () => setMorphologyForBuilding(null),\n    removeElectrophysiology: item => removeElectrophysiologyForBuilding(item),\n    removeModFile: item => removeModFileForBuilding(item),\n    clear: () => clearHodgkinHuxley()\n  }))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, !hasData ? __jsx(\"p\", null, loading ? '' : 'There are not data for search criteria') : __jsx(\"div\", null, (dataSets !== null && dataSets !== void 0 ? dataSets : []).map(item => __jsx(\"div\", {\n    className: \"row\",\n    key: `row-dataset-${item === null || item === void 0 ? void 0 : item.id}`\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(CardType, {\n    onClick: () => null,\n    dataSet: item,\n    selectedForDownload: selectedForDownloads.includes(item['source_id']),\n    toggleSelectedForDownload: _toggleSelectForDownload,\n    openMorphologyViewer: _openMorphologyViewer,\n    openImageLightbox: url => setLightboxImg(url),\n    closImageLightbox: () => setLightboxImg(null),\n    selectForModelBuilder: _selectForModelBuilding,\n    askForDownload: _askForDownload\n  }))))))), hasMoreItems ? __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(CustomButton, {\n    variant: \"primary\",\n    style: {\n      margin: '0 auto',\n      fontSize: 16\n    },\n    onClick: () => _loadMore()\n  }, \"Load More\"))) : null), loading ? __jsx(Spinner, null) : null), __jsx(AlertDialog, {\n    open: openAlertDialog,\n    onClose: _closeAlertDialog,\n    message: alertDialogMessage\n  }), __jsx(MorphologyViewerDialog, {\n    open: openMorphologyViewer,\n    onClose: _closeMorphologyViewer,\n    modelName: selectedMorphologyViewerModel === null || selectedMorphologyViewerModel === void 0 ? void 0 : selectedMorphologyViewerModel.modelName,\n    modelUrl: selectedMorphologyViewerModel === null || selectedMorphologyViewerModel === void 0 ? void 0 : selectedMorphologyViewerModel.modelUrl\n  }), !!lightboxImg ? __jsx(Lightbox, {\n    mainSrc: lightboxImg,\n    reactModalStyle: lightboxStyles(),\n    onCloseRequest: _onCloseLightBox\n  }) : null, __jsx(AgreeDownloadDialog, {\n    open: openAgreeDownloadDialog,\n    pageUrl: 'https://facility-hub.cineca.it/neuro_morpho/useterm.jsp',\n    acceptDownloadCallback: _acceptDownloadCallback,\n    cancelDownloadCallback: _cancelDownloadCallback\n  }));\n};\n\nconst getStaticProps = ({\n  params\n}) => ({\n  props: {\n    params\n  }\n});\n\nconst getStaticPaths = async () => {\n  const {\n    values: types\n  } = await getTypes('dataset');\n  const paths = (types !== null && types !== void 0 ? types : []).map(item => ({\n    params: {\n      type: item\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\n\nconst mapStateToProps = (state, props) => {\n  var _state$hodgkinHuxley$, _state$hodgkinHuxley, _state$hodgkinHuxley$2, _state$hodgkinHuxley2, _state$hodgkinHuxley$3, _state$hodgkinHuxley3;\n\n  return {\n    selectedMorphologyForBuilding: (_state$hodgkinHuxley$ = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley = state.hodgkinHuxley) === null || _state$hodgkinHuxley === void 0 ? void 0 : _state$hodgkinHuxley.morphology) !== null && _state$hodgkinHuxley$ !== void 0 ? _state$hodgkinHuxley$ : null,\n    selectedElectrophysiologiesForBuilding: (_state$hodgkinHuxley$2 = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley2 = state.hodgkinHuxley) === null || _state$hodgkinHuxley2 === void 0 ? void 0 : _state$hodgkinHuxley2.electrophysiologies) !== null && _state$hodgkinHuxley$2 !== void 0 ? _state$hodgkinHuxley$2 : null,\n    selectedModFilesForBuilding: (_state$hodgkinHuxley$3 = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley3 = state.hodgkinHuxley) === null || _state$hodgkinHuxley3 === void 0 ? void 0 : _state$hodgkinHuxley3.modFiles) !== null && _state$hodgkinHuxley$3 !== void 0 ? _state$hodgkinHuxley$3 : []\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setMorphologyForBuilding: item => dispatch(setMorphology(item)),\n  addElectrophysiologyForBuilding: item => dispatch(addElectrophysiology(item)),\n  removeElectrophysiologyForBuilding: item => dispatch(removeElectrophysiology(item)),\n  removeModFileForBuilding: item => dispatch(removeModFile(item)),\n  clearHodgkinHuxley: () => dispatch(clear())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(_DataPage);\nexport { getStaticProps, getStaticPaths };","map":null,"metadata":{},"sourceType":"module"}
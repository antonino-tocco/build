{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from \"react\";\nimport columnBlockStyle from './columnBlock.module.scss';\nimport { checkIfNotEmpty } from \"../../helpers/validatorHelper\";\nimport { SanitizedHtml } from \"../sanitizedHtml\";\nimport { getImageUrl } from \"../../helpers/imageHelper\";\nimport { CustomButton } from \"../buttons/buttons\";\nimport { useRouter } from \"next/router\";\nimport { getPageUrl } from \"../../helpers/navigationHelper\";\nexport function ColumnBlock({\n  block,\n  index,\n  columnClass = 'col',\n  variant = 'color1',\n  openImageCreditsDialog\n}) {\n  var _ref, _block$columns;\n\n  const padIndex = index + 1;\n  const router = useRouter();\n\n  const _goToUrl = async url => {\n    var _url$trim;\n\n    if (!!url && (url === null || url === void 0 ? void 0 : (_url$trim = url.trim()) === null || _url$trim === void 0 ? void 0 : _url$trim.length) > 0) {\n      if (url === null || url === void 0 ? void 0 : url.startsWith('http')) {\n        window.open(url);\n      } else {\n        await router.push(url);\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: `${columnClass} ${columnBlockStyle['column-block-container']}`\n  }, __jsx(\"div\", {\n    className: `${columnBlockStyle['column-block-content-container']} ${columnBlockStyle[variant]}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, padIndex)), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(\"div\", {\n    className: columnBlockStyle['column-block-title']\n  }, !!(block === null || block === void 0 ? void 0 : block.titleUrl) ? __jsx(\"a\", {\n    href: getPageUrl(block === null || block === void 0 ? void 0 : block.titleUrl)\n  }, block === null || block === void 0 ? void 0 : block.title) : block.title))), (_ref = (_block$columns = block.columns) !== null && _block$columns !== void 0 ? _block$columns : []) === null || _ref === void 0 ? void 0 : _ref.map(col => {\n    var _col$actions, _col$content, _col$image, _col$image3, _col$actions2;\n\n    const _hasImage = !!(col === null || col === void 0 ? void 0 : col.image);\n\n    const _hasActions = !!(col === null || col === void 0 ? void 0 : col.actions) && ((_col$actions = col === null || col === void 0 ? void 0 : col.actions) !== null && _col$actions !== void 0 ? _col$actions : []).length > 0;\n\n    const columnClassName = _hasImage ? 'col-md-6' : 'col-sm-12';\n    return __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        height: '100%',\n        flexFlow: 'column'\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        marginTop: 20\n      }\n    }, __jsx(\"div\", {\n      className: columnClassName\n    }, checkIfNotEmpty(col === null || col === void 0 ? void 0 : col.content) ? __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(SanitizedHtml, {\n      content: (_col$content = col === null || col === void 0 ? void 0 : col.content) !== null && _col$content !== void 0 ? _col$content : '',\n      className: columnBlockStyle['column-block-content']\n    }))) : null), __jsx(\"div\", {\n      className: `${columnClassName} text-center`\n    }, __jsx(\"div\", {\n      className: columnBlockStyle['column-block-image-container']\n    }, __jsx(\"img\", {\n      src: getImageUrl(col === null || col === void 0 ? void 0 : col.image),\n      className: columnBlockStyle['column-block-image']\n    }), !!(col === null || col === void 0 ? void 0 : (_col$image = col.image) === null || _col$image === void 0 ? void 0 : _col$image.imageCreditsLabel) ? __jsx(\"div\", {\n      className: columnBlockStyle['column-block-image-credits-label'],\n      onClick: () => {\n        var _col$image2;\n\n        return openImageCreditsDialog(col === null || col === void 0 ? void 0 : (_col$image2 = col.image) === null || _col$image2 === void 0 ? void 0 : _col$image2.imageCreditsContent);\n      }\n    }, __jsx(\"span\", null, col === null || col === void 0 ? void 0 : (_col$image3 = col.image) === null || _col$image3 === void 0 ? void 0 : _col$image3.imageCreditsLabel)) : null))), _hasActions ? __jsx(\"div\", {\n      className: `row ${columnBlockStyle['column-block-actions-row']}`,\n      style: {\n        marginTop: 10,\n        flex: '1 1 auto',\n        alignItems: 'center'\n      }\n    }, col === null || col === void 0 ? void 0 : (_col$actions2 = col.actions) === null || _col$actions2 === void 0 ? void 0 : _col$actions2.map((item, index) => {\n      var _col$actions3, _item$label;\n\n      return __jsx(\"div\", {\n        className: (index + 1) % 2 != 0 && (col === null || col === void 0 ? void 0 : (_col$actions3 = col.actions) === null || _col$actions3 === void 0 ? void 0 : _col$actions3.length) == index + 1 ? 'col-12' : 'col-lg-6 col-md-6 col-sm-12',\n        style: {\n          marginTop: 10\n        }\n      }, __jsx(CustomButton, {\n        isCta: true,\n        onClick: () => _goToUrl(item === null || item === void 0 ? void 0 : item.url),\n        style: {\n          margin: '0 auto',\n          fontSize: 14\n        }\n      }, (_item$label = item === null || item === void 0 ? void 0 : item.label) !== null && _item$label !== void 0 ? _item$label : ''));\n    })) : null);\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _process$env$BACKEND_;\n\nimport axios from 'axios';\nimport constants from \"../constants\";\nconst BACKEND_URL = (_process$env$BACKEND_ = process.env.BACKEND_URL) !== null && _process$env$BACKEND_ !== void 0 ? _process$env$BACKEND_ : 'http://localhost:5000';\nconst endpoints = {\n  auth: {\n    login: '/auth/login',\n    verifyToken: '/auth/verifyToken'\n  },\n  search: {\n    filters: indexName => `/filters/${indexName}`,\n    types: indexName => `/types/${indexName}`,\n    datasets: () => '/search/dataset',\n    models: () => '/search/model'\n  },\n  download: {\n    datasets: () => '/download/dataset',\n    models: () => '/download/model'\n  }\n};\n\nconst _parseSuccessfullResponse = response => {\n  try {\n    if (!!response && response.status === 200) {\n      return response.data;\n    }\n\n    return null;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst searchDatasets = async ({\n  data_type = null,\n  query,\n  filters,\n  page = 0,\n  hitsPerPage = 20\n}) => {\n  const url = `${BACKEND_URL}${endpoints.search.datasets()}/${page}/${hitsPerPage}`;\n\n  try {\n    const response = await axios.post(url, {\n      data_type,\n      query,\n      filters\n    });\n    return _parseSuccessfullResponse(response);\n  } catch (error) {\n    console.error('@@@@error retrieving datasets');\n    console.error(error);\n  }\n};\n\nconst searchModels = async ({\n  query,\n  filters,\n  page = 0,\n  hitsPerPage = 20\n}) => {\n  const url = `${BACKEND_URL}${endpoints.search.models()}/${page}/${hitsPerPage}`;\n\n  try {\n    const response = await axios.post(url, {\n      query,\n      filters\n    });\n    return _parseSuccessfullResponse(response);\n  } catch (error) {\n    console.error('@@@@error retrieving datasets');\n    console.error(error);\n  }\n};\n\nconst getFilters = async ({\n  indexName,\n  type\n}) => {\n  let url = `${BACKEND_URL}${endpoints.search.filters(indexName)}`;\n\n  if (!!type) {\n    url = `${url}/${type}`;\n  }\n\n  try {\n    const response = await axios.get(url);\n    return _parseSuccessfullResponse(response);\n  } catch (error) {\n    console.error('@@@@error retrieving data filters');\n    console.error(error);\n  }\n};\n\nconst getTypes = async indexName => {\n  const url = `${BACKEND_URL}${endpoints.search.types(indexName)}`;\n\n  try {\n    const response = await axios.get(url);\n    return _parseSuccessfullResponse(response);\n  } catch (error) {\n    console.error('@@@@@error retrieving data types');\n    console.error(error);\n  }\n};\n\nconst downloadAllDatasets = type => {\n  let url = `${BACKEND_URL}${endpoints.download.datasets()}/all`;\n\n  if (!!type && type.trim().length > 0) {\n    url += `?data_type=${type}`;\n  }\n\n  return url;\n};\n\nconst downloadDatasets = (ids = []) => {\n  const url = `${BACKEND_URL}${endpoints.download.datasets()}?ids=${ids.join(',')}`;\n  return url;\n};\n\nconst downloadAllModels = () => {\n  const url = `${BACKEND_URL}${endpoints.download.datasets()}/all`;\n  return url;\n};\n\nconst downloadModels = (ids = []) => {\n  const url = `${BACKEND_URL}${endpoints.download.datasets()}?ids=${ids.join(',')}`;\n  return url;\n};\n\nconst checkMorphologyForShow = async modelUrl => {\n  try {\n    const url = `${constants.MORPHOLOGY_VIEWER_BASE_URL}${modelUrl}`;\n    const response = await axios.get(url);\n    return !!response && !!response.status && response.status === 200;\n  } catch (error) {//console.error('@@@@@error retrieving data types');\n    //console.error(error)\n  }\n\n  return false;\n};\n\nconst login = async (username, password) => {\n  const url = `${BACKEND_URL}${endpoints.auth.login}`;\n\n  try {\n    const response = await axios.post(url, {\n      username,\n      password\n    });\n\n    if (response.status === 200) {\n      return {\n        success: true\n      };\n    }\n\n    return {\n      error: 'Something was wrong'\n    };\n  } catch (error) {\n    return {\n      error\n    };\n  }\n};\n\nconst verifyToken = async token => {\n  const url = `${BACKEND_URL}${endpoints.auth.verifyToken}`;\n\n  try {\n    const response = await axios.post(url, {\n      token\n    });\n\n    if (response.status === 200) {\n      return {\n        success: true\n      };\n    }\n\n    return {\n      error: 'Something was wrong'\n    };\n  } catch (error) {\n    return {\n      error\n    };\n  }\n};\n\nexport { searchDatasets, searchModels, getFilters, getTypes, downloadAllDatasets, downloadDatasets, downloadAllModels, downloadModels, login, verifyToken, checkMorphologyForShow };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Checkbox, FormControl, FormControlLabel, Switch, Tooltip } from '@material-ui/core';\nimport { CloudDownload as IconDownload, Close as IconClose, Add as IconAdd, Link as IconLink } from \"@material-ui/icons\";\nimport ExpandButton from \"../buttons/expandButton\";\nimport { CardContainer } from \"./card\";\nimport modelCardStyle from './modelCard.module.scss';\nimport { forwardRef } from \"react\";\n\nfunction _ModelCard(props, ref) {\n  var _model$download_link, _model$page_link, _model$source, _model$readme_link, _model$model_files, _model$source2, _model$name, _join, _model$model_types, _join2, _model$cell_types, _model$papers, _model$model_concepts, _model$implementers, _model$readme_link2, _model$model_files2, _model$model_files3;\n\n  const {\n    model,\n    selectedForDownload,\n    toggleSelectedForDownload,\n    onClick\n  } = props;\n  const [actionsExpanded, setActionsExpanded] = React.useState(false);\n  const [isModFilesExpanded, setIsModFilesExpanded] = React.useState(false);\n  const downloadLink = (_model$download_link = model === null || model === void 0 ? void 0 : model.download_link) !== null && _model$download_link !== void 0 ? _model$download_link : null;\n  const hasDownloadLink = !!downloadLink;\n  const pageLink = (_model$page_link = model === null || model === void 0 ? void 0 : model.page_link) !== null && _model$page_link !== void 0 ? _model$page_link : null;\n  const hasPageLink = !!pageLink;\n  const hasSource = !!(model === null || model === void 0 ? void 0 : model.source) && (model === null || model === void 0 ? void 0 : (_model$source = model.source) === null || _model$source === void 0 ? void 0 : _model$source.trim().length) > 0;\n  const hasReadme = !!(model === null || model === void 0 ? void 0 : model.readme_link) && (model === null || model === void 0 ? void 0 : (_model$readme_link = model.readme_link) === null || _model$readme_link === void 0 ? void 0 : _model$readme_link.trim().length) > 0;\n  const hasModFiles = !!(model === null || model === void 0 ? void 0 : model.model_files) && (model === null || model === void 0 ? void 0 : (_model$model_files = model.model_files) === null || _model$model_files === void 0 ? void 0 : _model$model_files.length) > 0;\n  const isInternal = hasSource && (model === null || model === void 0 ? void 0 : (_model$source2 = model.source) === null || _model$source2 === void 0 ? void 0 : _model$source2.toLowerCase()) === 'internal';\n\n  const _isModFileSelected = item => {\n    if (!!(props === null || props === void 0 ? void 0 : props.isModFileSelected)) {\n      return props === null || props === void 0 ? void 0 : props.isModFileSelected(item);\n    }\n  };\n\n  const _onToggleModFile = (item, checked) => {\n    if (!!(props === null || props === void 0 ? void 0 : props.toggleModFileForBuilding)) {\n      return props === null || props === void 0 ? void 0 : props.toggleModFileForBuilding(item, checked);\n    }\n  }; // @ts-ignore\n\n\n  return __jsx(CardContainer, {\n    key: `model-${model === null || model === void 0 ? void 0 : model.id}`\n  }, __jsx(\"div\", {\n    className: `${modelCardStyle['model-card-content']} ${!!(props === null || props === void 0 ? void 0 : props.variant) ? modelCardStyle[props === null || props === void 0 ? void 0 : props.variant] : null}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: `col-md-10 col-sm-12 ${modelCardStyle['model-card-left-content']}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-9 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-name-label']\n  }, \"Name: \"), __jsx(\"span\", {\n    className: modelCardStyle['model-card-name-value']\n  }, (_model$name = model === null || model === void 0 ? void 0 : model.name) !== null && _model$name !== void 0 ? _model$name : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-types-label']\n  }, \"Type(s): \"), __jsx(\"span\", {\n    className: modelCardStyle['model-card-types-value']\n  }, (_join = ((_model$model_types = model === null || model === void 0 ? void 0 : model.model_types) !== null && _model$model_types !== void 0 ? _model$model_types : []).join(',')) !== null && _join !== void 0 ? _join : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-types-label']\n  }, \"Cell Type(s): \"), __jsx(\"span\", {\n    className: modelCardStyle['model-card-types-value']\n  }, (_join2 = ((_model$cell_types = model === null || model === void 0 ? void 0 : model.cell_types) !== null && _model$cell_types !== void 0 ? _model$cell_types : []).join(',')) !== null && _join2 !== void 0 ? _join2 : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-label']\n  }, \"Paper(s): \"), ((_model$papers = model === null || model === void 0 ? void 0 : model.papers) !== null && _model$papers !== void 0 ? _model$papers : []).map(item => !!(item === null || item === void 0 ? void 0 : item.url) ? __jsx(\"a\", {\n    className: modelCardStyle['model-card-papers-value'],\n    href: item.url\n  }, item.label) : __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-value']\n  }, item.label))), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-label']\n  }, \"Model Concept(s): \"), __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-value']\n  }, ((_model$model_concepts = model === null || model === void 0 ? void 0 : model.model_concepts) !== null && _model$model_concepts !== void 0 ? _model$model_concepts : []).join(','))), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-label']\n  }, \"Implementer(s): \"), __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-value']\n  }, ((_model$implementers = model === null || model === void 0 ? void 0 : model.implementers) !== null && _model$implementers !== void 0 ? _model$implementers : []).join(','))), hasReadme ? __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-label']\n  }, \"Readme: \"), __jsx(\"a\", {\n    href: model === null || model === void 0 ? void 0 : model.readme_link,\n    target: \"_blank\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-papers-value']\n  }, (_model$readme_link2 = model === null || model === void 0 ? void 0 : model.readme_link) !== null && _model$readme_link2 !== void 0 ? _model$readme_link2 : ''))) : null)), __jsx(\"div\", {\n    className: \"col-md-3 col-sm-12 text-right\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, hasSource ? __jsx(\"span\", {\n    className: modelCardStyle['model-card-source-label']\n  }, \"SOURCE: \", model === null || model === void 0 ? void 0 : model.source) : null, hasModFiles ? __jsx(\"div\", null, __jsx(\"span\", {\n    className: modelCardStyle['model-card-source-label']\n  }, \"Mod Files: \", model === null || model === void 0 ? void 0 : (_model$model_files2 = model.model_files) === null || _model$model_files2 === void 0 ? void 0 : _model$model_files2.length)) : null)))), hasModFiles ? __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-12 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(\"div\", {\n    className: `${modelCardStyle['model-card-expanded-button']} button-primary`,\n    onClick: () => setIsModFilesExpanded(!isModFilesExpanded)\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-expanded-all-label']\n  }, isModFilesExpanded ? 'Show less' : 'Show all'), isModFilesExpanded ? __jsx(IconClose, {\n    htmlColor: '#fff'\n  }) : __jsx(IconAdd, {\n    htmlColor: '#fff'\n  }))), isModFilesExpanded ? __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: modelCardStyle['model-card-mod_files-label']\n  }, \"Mod File(s): \"))), __jsx(\"div\", {\n    className: \"row\"\n  }, ((_model$model_files3 = model === null || model === void 0 ? void 0 : model.model_files) !== null && _model$model_files3 !== void 0 ? _model$model_files3 : []).map(item => __jsx(\"div\", {\n    className: \"col-md-4 col-sm-12\"\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      key: item.url,\n      checked: _isModFileSelected(item),\n      onChange: (event, checked) => _onToggleModFile(item, checked)\n    }),\n    label: ''\n  }), __jsx(\"a\", {\n    href: item.url,\n    target: \"_blank\",\n    className: modelCardStyle['model-card-mod_files-value']\n  }, item.label))))) : null))) : null), __jsx(\"div\", {\n    className: `${modelCardStyle['model-card-actions-container']}\n                    ${!!(props === null || props === void 0 ? void 0 : props.variant) ? modelCardStyle[props === null || props === void 0 ? void 0 : props.variant] : null} col-md-2 col-sm-12`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, hasDownloadLink ? __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(FormControl, null, __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      defaultChecked: selectedForDownload,\n      checked: selectedForDownload,\n      onChange: (event, value) => toggleSelectedForDownload(model['source_id'], value)\n    }),\n    label: 'Select for download'\n  }))) : null, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, hasDownloadLink ? __jsx(\"span\", {\n    className: modelCardStyle['model-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Download\"\n  }, __jsx(ExpandButton, {\n    label: 'Download',\n    icon: __jsx(IconDownload, null),\n    expanded: actionsExpanded,\n    onClick: () => window.open(downloadLink)\n  }))) : null, hasPageLink ? __jsx(\"span\", {\n    className: modelCardStyle['model-card-action']\n  }, __jsx(Tooltip, {\n    title: isInternal ? 'View on Site (internal)' : 'View on Site'\n  }, __jsx(ExpandButton, {\n    label: isInternal ? 'View on Site (internal)' : 'View on Site',\n    icon: __jsx(IconLink, {\n      htmlColor: isInternal ? '#0F4C81' : '#000'\n    }),\n    expanded: actionsExpanded,\n    onClick: () => window.open(pageLink)\n  }))) : null))))))));\n}\n\nconst ModelCard = /*#__PURE__*/forwardRef((props, ref) => _ModelCard(props, ref));\nexport { ModelCard };","map":null,"metadata":{},"sourceType":"module"}
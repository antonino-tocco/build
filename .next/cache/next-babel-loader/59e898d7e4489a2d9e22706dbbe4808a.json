{"ast":null,"code":"var _storedHHFComm$morpho, _storedHHFComm$electr, _storedHHFComm$mod_fi;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { LocalStorageHelper } from \"../helpers/storageHelper\";\nimport { hashCode } from \"../helpers/hashHelper\";\nimport hodgkinHuxleyConstants from \"../constants/hodgkinHuxley.constants\";\nimport constants from \"../constants\";\n\nconst _storedHHFComm = LocalStorageHelper.get(constants.HHF_COMM);\n\nconst _defaultInitialState = !!_storedHHFComm ? {\n  morphology: (_storedHHFComm$morpho = _storedHHFComm === null || _storedHHFComm === void 0 ? void 0 : _storedHHFComm.morphology) !== null && _storedHHFComm$morpho !== void 0 ? _storedHHFComm$morpho : null,\n  electrophysiologies: (_storedHHFComm$electr = _storedHHFComm === null || _storedHHFComm === void 0 ? void 0 : _storedHHFComm.electrophysiologies) !== null && _storedHHFComm$electr !== void 0 ? _storedHHFComm$electr : [],\n  modFiles: (_storedHHFComm$mod_fi = _storedHHFComm === null || _storedHHFComm === void 0 ? void 0 : _storedHHFComm.mod_files) !== null && _storedHHFComm$mod_fi !== void 0 ? _storedHHFComm$mod_fi : []\n} : {\n  morphology: null,\n  electrophysiologies: [],\n  modFiles: []\n};\n\nconst _storeHHFComm = data => {\n  if (!!data) {\n    const newData = {};\n\n    if (!!(data === null || data === void 0 ? void 0 : data.morphology)) {\n      newData.morphology = data.morphology;\n    }\n\n    if (!!(data === null || data === void 0 ? void 0 : data.electrophysiologies)) {\n      newData.electrophysiologies = data.electrophysiologies;\n    }\n\n    if (!!data.modFiles) {\n      var _data$modFiles;\n\n      newData.mod_files = (_data$modFiles = data.modFiles) !== null && _data$modFiles !== void 0 ? _data$modFiles : [];\n    }\n\n    LocalStorageHelper.save(constants.HHF_COMM, newData);\n  }\n};\n\nexport function hodgkinHuxley(initialState = _defaultInitialState, action) {\n  var _action$electrophysio, _action$electrophysio2, _action$modFile, _action$modFile2;\n\n  switch (action.type) {\n    case hodgkinHuxleyConstants.SET_MORPHOLOGY:\n      {\n        var _action$morphology;\n\n        const newState = _objectSpread(_objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState), {}, {\n          type: action === null || action === void 0 ? void 0 : action.type,\n          morphology: (_action$morphology = action === null || action === void 0 ? void 0 : action.morphology) !== null && _action$morphology !== void 0 ? _action$morphology : null\n        });\n\n        _storeHHFComm(newState);\n\n        return newState;\n      }\n\n    case hodgkinHuxleyConstants.ADD_ELECTROPHYSIOLOGY:\n      const _electrophysiology = (_action$electrophysio = action === null || action === void 0 ? void 0 : action.electrophysiology) !== null && _action$electrophysio !== void 0 ? _action$electrophysio : null;\n\n      if (!!_electrophysiology) {\n        var _ref, _initialState$electro;\n\n        const electrophysiologies = (_ref = [...((_initialState$electro = initialState === null || initialState === void 0 ? void 0 : initialState.electrophysiologies) !== null && _initialState$electro !== void 0 ? _initialState$electro : [])]) !== null && _ref !== void 0 ? _ref : [];\n        const index = electrophysiologies === null || electrophysiologies === void 0 ? void 0 : electrophysiologies.findIndex(item => hashCode(JSON.stringify(_electrophysiology)) === hashCode(JSON.stringify(item)));\n\n        if (index === -1) {\n          electrophysiologies === null || electrophysiologies === void 0 ? void 0 : electrophysiologies.push(_electrophysiology);\n        }\n\n        const newState = _objectSpread(_objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState), {}, {\n          type: action === null || action === void 0 ? void 0 : action.type,\n          electrophysiologies\n        });\n\n        _storeHHFComm(newState);\n\n        return newState;\n      }\n\n      return _objectSpread({}, initialState);\n\n    case hodgkinHuxleyConstants.REMOVE_ELECTROPHYSIOLOGY:\n      const electrophysiology = (_action$electrophysio2 = action === null || action === void 0 ? void 0 : action.electrophysiology) !== null && _action$electrophysio2 !== void 0 ? _action$electrophysio2 : null;\n\n      if (!!electrophysiology) {\n        var _ref2, _initialState$electro2;\n\n        const electrophysiologies = (_ref2 = [...((_initialState$electro2 = initialState === null || initialState === void 0 ? void 0 : initialState.electrophysiologies) !== null && _initialState$electro2 !== void 0 ? _initialState$electro2 : [])]) !== null && _ref2 !== void 0 ? _ref2 : [];\n        const index = electrophysiologies === null || electrophysiologies === void 0 ? void 0 : electrophysiologies.findIndex(item => hashCode(JSON.stringify(electrophysiology)) === hashCode(JSON.stringify(item)));\n\n        if (index > -1) {\n          electrophysiologies === null || electrophysiologies === void 0 ? void 0 : electrophysiologies.splice(index, 1);\n        }\n\n        const newState = _objectSpread(_objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState), {}, {\n          type: action === null || action === void 0 ? void 0 : action.type,\n          electrophysiologies\n        });\n\n        _storeHHFComm(newState);\n\n        return newState;\n      }\n\n      return _objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState);\n\n    case hodgkinHuxleyConstants.ADD_MOD_FILE:\n      const _modFile = (_action$modFile = action === null || action === void 0 ? void 0 : action.modFile) !== null && _action$modFile !== void 0 ? _action$modFile : null;\n\n      if (!!_modFile) {\n        var _ref3, _initialState$modFile;\n\n        const modFiles = (_ref3 = [...((_initialState$modFile = initialState === null || initialState === void 0 ? void 0 : initialState.modFiles) !== null && _initialState$modFile !== void 0 ? _initialState$modFile : [])]) !== null && _ref3 !== void 0 ? _ref3 : [];\n        const index = modFiles === null || modFiles === void 0 ? void 0 : modFiles.findIndex(item => hashCode(JSON.stringify(_modFile)) === hashCode(JSON.stringify(item)));\n\n        if (index === -1) {\n          modFiles === null || modFiles === void 0 ? void 0 : modFiles.push(_modFile);\n        }\n\n        const newState = _objectSpread(_objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState), {}, {\n          type: action === null || action === void 0 ? void 0 : action.type,\n          modFiles: modFiles\n        });\n\n        _storeHHFComm(newState);\n\n        return newState;\n      }\n\n      return _objectSpread({}, initialState);\n\n    case hodgkinHuxleyConstants.REMOVE_MOD_FILE:\n      const modFile = (_action$modFile2 = action === null || action === void 0 ? void 0 : action.modFile) !== null && _action$modFile2 !== void 0 ? _action$modFile2 : null;\n\n      if (!!modFile) {\n        var _ref4, _initialState$modFile2;\n\n        const modFiles = (_ref4 = [...((_initialState$modFile2 = initialState === null || initialState === void 0 ? void 0 : initialState.modFiles) !== null && _initialState$modFile2 !== void 0 ? _initialState$modFile2 : [])]) !== null && _ref4 !== void 0 ? _ref4 : [];\n        const index = modFiles === null || modFiles === void 0 ? void 0 : modFiles.findIndex(item => hashCode(JSON.stringify(modFile)) === hashCode(JSON.stringify(item)));\n\n        if (index > -1) {\n          modFiles === null || modFiles === void 0 ? void 0 : modFiles.splice(index, 1);\n        }\n\n        const newState = _objectSpread(_objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState), {}, {\n          type: action === null || action === void 0 ? void 0 : action.type,\n          modFiles: modFiles\n        });\n\n        _storeHHFComm(newState);\n\n        return newState;\n      }\n\n      return _objectSpread({}, initialState !== null && initialState !== void 0 ? initialState : _defaultInitialState);\n\n    case hodgkinHuxleyConstants.CLEAR:\n      LocalStorageHelper.delete(constants.HHF_COMM);\n      return {\n        type: action === null || action === void 0 ? void 0 : action.type,\n        morphology: null,\n        modFiles: []\n      };\n\n    default:\n      return _defaultInitialState;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Tooltip } from '@material-ui/core';\nimport { CloudDownload as IconDownload, Link as IconLink } from \"@material-ui/icons\";\nimport ExpandButton from \"../buttons/expandButton\";\nimport { CardContainer } from \"./card\";\nimport { getImageUrlByPath } from \"../../helpers/imageHelper\";\nimport dataSetCardStyle from './datasetCard.module.scss';\nimport { forwardRef } from \"react\";\n\nfunction _DataSetCard(props, ref) {\n  const {\n    dataSet,\n    selectedForDownload,\n    toggleSelectedForDownload,\n    onClick\n  } = props;\n  const [actionsExpanded, setActionsExpanded] = React.useState(false);\n\n  const _openImageLightbox = url => {\n    if (!!(props === null || props === void 0 ? void 0 : props.openImageLightbox)) {\n      props.openImageLightbox(url);\n    }\n  };\n\n  const presynaptic = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.presynaptic) ? dataSet === null || dataSet === void 0 ? void 0 : dataSet.presynaptic : null;\n  const postsynaptyc = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.postsynaptic) ? dataSet === null || dataSet === void 0 ? void 0 : dataSet.postsynaptic : null;\n\n  const renderNeuron = (neuron, headerLabel) => {\n    var _getImageUrlByPath, _neuron$name, _neuron$papers, _neuron$secondary_reg, _neuron$layers;\n\n    const hasImage = !!(neuron === null || neuron === void 0 ? void 0 : neuron.icon);\n    const imageUrl = (_getImageUrlByPath = getImageUrlByPath(neuron === null || neuron === void 0 ? void 0 : neuron.icon)) !== null && _getImageUrlByPath !== void 0 ? _getImageUrlByPath : getImageUrlByPath('/assets/images/placeholder.png');\n    return __jsx(\"div\", {\n      className: \"col-md-6 col-sm-12\"\n    }, __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        height: '100%'\n      }\n    }, __jsx(\"div\", {\n      className: \"col-md-3 col-sm-12\"\n    }, __jsx(\"img\", {\n      src: imageUrl,\n      onClick: () => hasImage ? _openImageLightbox(imageUrl) : null,\n      className: `${dataSetCardStyle['dataset-card-image']} ${!hasImage ? dataSetCardStyle['not-available'] : ''}`\n    })), __jsx(\"div\", {\n      className: `${dataSetCardStyle['dataset-card-main-content']} col-md-7 col-sm-12`\n    }, __jsx(\"div\", {\n      className: `row ${dataSetCardStyle['dataset-card-main-content-inner']}`\n    }, __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-name-label']\n    }, headerLabel)), __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-name-label']\n    }, \"Name: \"), __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-name-value']\n    }, (_neuron$name = neuron === null || neuron === void 0 ? void 0 : neuron.name) !== null && _neuron$name !== void 0 ? _neuron$name : '')), __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-papers-label']\n    }, \"Paper(s): \"), ((_neuron$papers = neuron === null || neuron === void 0 ? void 0 : neuron.papers) !== null && _neuron$papers !== void 0 ? _neuron$papers : []).map(item => !!(item === null || item === void 0 ? void 0 : item.url) ? __jsx(\"a\", {\n      className: dataSetCardStyle['dataset-card-papers-value'],\n      target: \"_blank\",\n      href: item.url\n    }, item.label) : __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-papers-value']\n    }, item.label))), __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-secondary-region-label']\n    }, \"Secondary Region: \"), __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-secondary-region-value']\n    }, ((_neuron$secondary_reg = neuron === null || neuron === void 0 ? void 0 : neuron.secondary_region) !== null && _neuron$secondary_reg !== void 0 ? _neuron$secondary_reg : []).join(','))), __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-secondary-region-label']\n    }, \"Layers: \"), __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-secondary-region-value']\n    }, ((_neuron$layers = neuron === null || neuron === void 0 ? void 0 : neuron.layers) !== null && _neuron$layers !== void 0 ? _neuron$layers : []).join(','))), __jsx(\"div\", {\n      className: \"col-12 text-right\"\n    }, (neuron === null || neuron === void 0 ? void 0 : neuron.source) ? __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-source-label']\n    }, \"SOURCE: \", neuron === null || neuron === void 0 ? void 0 : neuron.source) : null))), __jsx(\"div\", {\n      className: `${dataSetCardStyle['dataset-card-actions-container']} col-md-2 col-sm-12`\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12 text-left\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, !!(presynaptic === null || presynaptic === void 0 ? void 0 : presynaptic.download_link) ? __jsx(\"div\", {\n      className: \"col-12 text-center\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-action']\n    }, __jsx(Tooltip, {\n      title: \"Download\"\n    }, __jsx(ExpandButton, {\n      label: 'Download',\n      icon: __jsx(IconDownload, null),\n      expanded: actionsExpanded,\n      onClick: () => window.open(presynaptic === null || presynaptic === void 0 ? void 0 : presynaptic.download_link)\n    })))) : null, !!(neuron === null || neuron === void 0 ? void 0 : neuron.page_link) ? __jsx(\"div\", {\n      className: \"col-12 text-center\"\n    }, __jsx(\"span\", {\n      className: dataSetCardStyle['dataset-card-action']\n    }, __jsx(Tooltip, {\n      title: \"View on Site\"\n    }, __jsx(ExpandButton, {\n      label: 'View on Site',\n      icon: __jsx(IconLink, null),\n      expanded: actionsExpanded,\n      onClick: () => window.open(neuron === null || neuron === void 0 ? void 0 : neuron.page_link)\n    })))) : null))))));\n  };\n\n  return __jsx(CardContainer, {\n    key: `dataset-${dataSet === null || dataSet === void 0 ? void 0 : dataSet.id}`\n  }, __jsx(\"div\", {\n    className: `${dataSetCardStyle['dataset-card-content']} ${dataSetCardStyle['connection']}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, !!presynaptic ? renderNeuron(presynaptic, 'Presynaptic') : null, !!postsynaptyc ? renderNeuron(postsynaptyc, 'Postsynaptic') : null)));\n}\n\nconst ConnectionCard = /*#__PURE__*/forwardRef((props, ref) => _DataSetCard(props, ref));\nexport { ConnectionCard };","map":null,"metadata":{},"sourceType":"module"}
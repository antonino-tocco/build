{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { FormControl, FormControlLabel, Switch, Tooltip } from '@material-ui/core';\nimport { CloudDownload as IconDownload, Link as IconLink, Send as IconSend } from \"@material-ui/icons\";\nimport { CardContainer } from \"./card\";\nimport { getImageUrlByPath } from \"../../helpers/imageHelper\";\nimport ExpandButton from \"../buttons/expandButton\";\nimport dataSetCardStyle from './datasetCard.module.scss';\nimport { forwardRef, useEffect } from \"react\";\nimport { downloadFile } from \"../../helpers/downloadHelper\";\nimport { checkMorphologyForShow } from \"../../helpers/apiHelper\";\n\nfunction _DataSetCard(props, ref) {\n  var _dataSet$download_lin, _dataSet$page_link, _dataSet$source, _getImageUrlByPath, _dataSet$source2, _dataSet$name, _dataSet$species, _dataSet$region, _dataSet$cell_type, _dataSet$secondary_re, _dataSet$physical_int;\n\n  var dataSet = props.dataSet,\n      selectedForDownload = props.selectedForDownload,\n      toggleSelectedForDownload = props.toggleSelectedForDownload,\n      onClick = props.onClick;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      actionsExpanded = _React$useState2[0],\n      setActionsExpanded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      canOpenMorphologyViewer = _React$useState4[0],\n      setCanOpenMorphologyViewer = _React$useState4[1];\n\n  useEffect(function () {\n    _checkIfMorphologyIsVisible();\n  }, []);\n\n  var _openMorphologyViewer = function _openMorphologyViewer() {\n    if (!!(props === null || props === void 0 ? void 0 : props.openMorphologyViewer)) {\n      props === null || props === void 0 ? void 0 : props.openMorphologyViewer({\n        modelName: dataSet === null || dataSet === void 0 ? void 0 : dataSet.name,\n        modelUrl: dataSet === null || dataSet === void 0 ? void 0 : dataSet.download_link,\n        detailPage: dataSet === null || dataSet === void 0 ? void 0 : dataSet.page_link\n      });\n    }\n  };\n\n  var _openImageLightbox = function _openImageLightbox(url) {\n    if (!!(props === null || props === void 0 ? void 0 : props.openImageLightbox)) {\n      props.openImageLightbox(url);\n    }\n  };\n\n  var _closeImageLightbox = function _closeImageLightbox() {\n    if (!!(props === null || props === void 0 ? void 0 : props.closeImageLightbox)) {\n      props.closeImageLightbox();\n    }\n  };\n\n  var _selectForModelBuilder = function _selectForModelBuilder() {\n    if (!!(props === null || props === void 0 ? void 0 : props.selectForModelBuilder)) {\n      props === null || props === void 0 ? void 0 : props.selectForModelBuilder(dataSet);\n    }\n  };\n\n  var _checkIfMorphologyIsVisible = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!hasDownloadLink) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.t0 = setCanOpenMorphologyViewer;\n              _context.next = 4;\n              return checkMorphologyForShow(downloadLink);\n\n            case 4:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function _checkIfMorphologyIsVisible() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var downloadLink = (_dataSet$download_lin = dataSet === null || dataSet === void 0 ? void 0 : dataSet.download_link) !== null && _dataSet$download_lin !== void 0 ? _dataSet$download_lin : null;\n  var hasDownloadLink = !!downloadLink;\n  var pageLink = (_dataSet$page_link = dataSet === null || dataSet === void 0 ? void 0 : dataSet.page_link) !== null && _dataSet$page_link !== void 0 ? _dataSet$page_link : null;\n  var hasPageLink = !!pageLink;\n  var hasSource = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source = dataSet.source) === null || _dataSet$source === void 0 ? void 0 : _dataSet$source.trim().length) > 0;\n  var hasImage = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon);\n  var imageUrl = (_getImageUrlByPath = getImageUrlByPath(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon)) !== null && _getImageUrlByPath !== void 0 ? _getImageUrlByPath : getImageUrlByPath('/assets/images/placeholder.png');\n  var isInternal = hasSource && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source2 = dataSet.source) === null || _dataSet$source2 === void 0 ? void 0 : _dataSet$source2.toLowerCase()) === 'internal';\n  return __jsx(CardContainer, {\n    key: \"dataset-\".concat(dataSet === null || dataSet === void 0 ? void 0 : dataSet.id)\n  }, __jsx(\"div\", {\n    className: dataSetCardStyle['dataset-card-content']\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-2 col-sm-12\"\n  }, __jsx(\"img\", {\n    src: imageUrl,\n    onClick: function onClick() {\n      return hasImage ? _openImageLightbox(imageUrl) : null;\n    },\n    className: \"\".concat(dataSetCardStyle['dataset-card-image'], \" \").concat(!hasImage ? dataSetCardStyle['not-available'] : '')\n  })), __jsx(\"div\", {\n    className: \"\".concat(dataSetCardStyle['dataset-card-main-content'], \" col-md-7 col-sm-12\")\n  }, __jsx(\"div\", {\n    className: \"row \".concat(dataSetCardStyle['dataset-card-main-content-inner'])\n  }, __jsx(\"div\", {\n    className: \"col-md-6 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-label']\n  }, \"Name: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-value']\n  }, (_dataSet$name = dataSet === null || dataSet === void 0 ? void 0 : dataSet.name) !== null && _dataSet$name !== void 0 ? _dataSet$name : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-species-label']\n  }, \"Species: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-species-value']\n  }, (_dataSet$species = dataSet === null || dataSet === void 0 ? void 0 : dataSet.species) !== null && _dataSet$species !== void 0 ? _dataSet$species : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-region-label']\n  }, \"Region: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-region-value']\n  }, (_dataSet$region = dataSet === null || dataSet === void 0 ? void 0 : dataSet.region) !== null && _dataSet$region !== void 0 ? _dataSet$region : '')))), __jsx(\"div\", {\n    className: \"col-md-6 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-label']\n  }, \"Cell Type: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-value']\n  }, (_dataSet$cell_type = dataSet === null || dataSet === void 0 ? void 0 : dataSet.cell_type) !== null && _dataSet$cell_type !== void 0 ? _dataSet$cell_type : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-label']\n  }, \"Secondary Region: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-value']\n  }, (_dataSet$secondary_re = dataSet === null || dataSet === void 0 ? void 0 : dataSet.secondary_region) !== null && _dataSet$secondary_re !== void 0 ? _dataSet$secondary_re : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-physical-integrity-label']\n  }, \"Physical Integrity: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-physical-integrity-value']\n  }, (_dataSet$physical_int = dataSet === null || dataSet === void 0 ? void 0 : dataSet.physical_integrity) !== null && _dataSet$physical_int !== void 0 ? _dataSet$physical_int : '')))), __jsx(\"div\", {\n    className: \"col-12 text-right\"\n  }, hasSource ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-source-label']\n  }, \"SOURCE: \", dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) : null))))), __jsx(\"div\", {\n    className: \"\".concat(dataSetCardStyle['dataset-card-actions-container'], \" col-md-3 col-sm-12\")\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, hasDownloadLink ? __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(FormControl, null, __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      defaultChecked: selectedForDownload,\n      checked: selectedForDownload,\n      onChange: function onChange(event, value) {\n        return toggleSelectedForDownload(dataSet['source_id'], value);\n      }\n    }),\n    label: 'Select for download'\n  }))) : null, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, hasDownloadLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Download\"\n  }, __jsx(ExpandButton, {\n    label: 'Download',\n    icon: __jsx(IconDownload, null),\n    expanded: actionsExpanded,\n    onClick: function onClick() {\n      return !!(props === null || props === void 0 ? void 0 : props.askForDownload) ? props === null || props === void 0 ? void 0 : props.askForDownload({\n        url: downloadLink,\n        source: dataSet === null || dataSet === void 0 ? void 0 : dataSet.source\n      }) : downloadFile(downloadLink);\n    }\n  }))) : null, hasPageLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: isInternal ? 'View on Site (internal)' : 'View on Site'\n  }, __jsx(ExpandButton, {\n    label: isInternal ? 'View on Site (internal)' : 'View on Site',\n    icon: __jsx(IconLink, {\n      htmlColor: isInternal ? '#0F4C81' : '#000'\n    }),\n    expanded: actionsExpanded,\n    onClick: function onClick() {\n      return window.open(pageLink);\n    }\n  }))) : null, hasDownloadLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Add to HH Neuron Builder - Cart\"\n  }, __jsx(ExpandButton, {\n    label: 'Add to HH Neuron Builder - Cart',\n    icon: __jsx(IconSend, null),\n    expanded: actionsExpanded,\n    onClick: function onClick() {\n      return _selectForModelBuilder();\n    }\n  }))) : null, hasDownloadLink && canOpenMorphologyViewer ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Open Morphology Viewer\"\n  }, __jsx(ExpandButton, {\n    label: 'Open Morphology Viewer',\n    icon: __jsx(\"img\", {\n      src: getImageUrlByPath('/assets/icons/3d.svg')\n    }),\n    expanded: actionsExpanded,\n    onClick: function onClick() {\n      return _openMorphologyViewer();\n    }\n  }))) : null))))))));\n}\n\nvar MorphologyCard = /*#__PURE__*/forwardRef(function (props, ref) {\n  return _DataSetCard(props, ref);\n});\nexport { MorphologyCard };","map":null,"metadata":{},"sourceType":"module"}
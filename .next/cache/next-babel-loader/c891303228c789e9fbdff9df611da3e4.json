{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { getTypes } from \"../../helpers/apiHelper\";\nimport PageContainer from \"../../components/page/pageContainer\";\nimport pageContentStyle from \"../page.module.scss\";\nimport { Typography } from \"@material-ui/core\";\nimport Spinner from \"../../components/spinner/spinner\";\nimport { getPage } from \"../../helpers/dataHelper\";\nimport { DataTypeCtaButton } from \"../../components/cta/dataTypeCtaButton\";\nimport constants from \"../../constants\";\n\nfunction DataHomePage() {\n  var router = useRouter();\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      page = _React$useState4[0],\n      setPage = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dataTypes = _React$useState6[0],\n      setDataTypes = _React$useState6[1];\n\n  useEffect(function () {\n    setup();\n  }, []);\n\n  var setup = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _page, _yield$getTypes, types;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getPage('data');\n\n            case 2:\n              _page = _context.sent;\n              _context.next = 5;\n              return getTypes('dataset');\n\n            case 5:\n              _yield$getTypes = _context.sent;\n              types = _yield$getTypes.values;\n              setPage(_page);\n              setDataTypes(types);\n              setLoading(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setup() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _ctaAction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return router.push(\"/data/\".concat(type));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function _ctaAction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _getDataTypeLabel = function _getDataTypeLabel(type) {\n    var _constants$DATA_TYPE_;\n\n    return (_constants$DATA_TYPE_ = constants.DATA_TYPE_LABELS[type]) !== null && _constants$DATA_TYPE_ !== void 0 ? _constants$DATA_TYPE_ : type;\n  };\n\n  return __jsx(PageContainer, {\n    variant: page === null || page === void 0 ? void 0 : page.variant,\n    mainClassName: 'with-fixed-header',\n    fixedHeader: true\n  }, __jsx(\"div\", {\n    className: \"container \".concat(pageContentStyle['page-container'])\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: \"\".concat(pageContentStyle['page-header-label'], \" text-center\")\n  }, page.title), __jsx(\"div\", {\n    className: pageContentStyle['page-header-divider']\n  }))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, page.content)), __jsx(\"section\", {\n    style: {\n      marginTop: 20\n    }\n  }, (dataTypes !== null && dataTypes !== void 0 ? dataTypes : []).map(function (item) {\n    return __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        marginTop: 20\n      }\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(DataTypeCtaButton, {\n      type: _getDataTypeLabel(item),\n      action: function action(type) {\n        return _ctaAction(item);\n      }\n    })));\n  })), loading ? __jsx(Spinner, null) : null));\n}\n\nexport default DataHomePage;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Tooltip } from '@material-ui/core';\nimport { CloudDownload as IconDownload, Link as IconLink, Send as IconSend } from \"@material-ui/icons\";\nimport { CardContainer } from \"./card\";\nimport { getImageUrlByPath } from \"../../helpers/imageHelper\";\nimport ExpandButton from \"../buttons/expandButton\";\nimport dataSetCardStyle from './datasetCard.module.scss';\nimport { forwardRef } from \"react\";\n\nfunction _DataSetCard(props, ref) {\n  var _dataSet$download_lin, _dataSet$page_link, _dataSet$source, _getImageUrlByPath, _dataSet$source2, _dataSet$name, _dataSet$papers, _dataSet$secondary_re, _dataSet$layers, _dataSet$layers2, _dataSet$etype;\n\n  const {\n    dataSet,\n    selectedForDownload,\n    toggleSelectedForDownload,\n    onClick\n  } = props;\n  const [actionsExpanded, setActionsExpanded] = React.useState(false);\n\n  const _onClick = () => {\n    if (!!onClick) {\n      onClick();\n    }\n  };\n\n  const _openImageLightbox = url => {\n    if (!!(props === null || props === void 0 ? void 0 : props.openImageLightbox)) {\n      props.openImageLightbox(url);\n    }\n  };\n\n  const _selectForModelBuilder = () => {\n    if (!!(props === null || props === void 0 ? void 0 : props.selectForModelBuilder)) {\n      props === null || props === void 0 ? void 0 : props.selectForModelBuilder(dataSet);\n    }\n  };\n\n  const downloadLink = (_dataSet$download_lin = dataSet === null || dataSet === void 0 ? void 0 : dataSet.download_link) !== null && _dataSet$download_lin !== void 0 ? _dataSet$download_lin : null;\n  const hasDownloadLink = !!downloadLink;\n  const pageLink = (_dataSet$page_link = dataSet === null || dataSet === void 0 ? void 0 : dataSet.page_link) !== null && _dataSet$page_link !== void 0 ? _dataSet$page_link : null;\n  const hasPageLink = !!pageLink;\n  const hasSource = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source = dataSet.source) === null || _dataSet$source === void 0 ? void 0 : _dataSet$source.trim().length) > 0;\n  const hasImage = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon);\n  const imageUrl = (_getImageUrlByPath = getImageUrlByPath(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon)) !== null && _getImageUrlByPath !== void 0 ? _getImageUrlByPath : getImageUrlByPath('/assets/images/placeholder.png');\n  const isInternal = hasSource && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source2 = dataSet.source) === null || _dataSet$source2 === void 0 ? void 0 : _dataSet$source2.toLowerCase()) === 'internal';\n  return __jsx(CardContainer, {\n    key: `dataset-${dataSet === null || dataSet === void 0 ? void 0 : dataSet.id}`\n  }, __jsx(\"div\", {\n    className: dataSetCardStyle['dataset-card-content']\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-2 col-sm-12\"\n  }, __jsx(\"img\", {\n    src: imageUrl,\n    onClick: () => hasImage ? _openImageLightbox(imageUrl) : null,\n    className: `${dataSetCardStyle['dataset-card-image']} ${!hasImage ? dataSetCardStyle['not-available'] : ''}`\n  })), __jsx(\"div\", {\n    className: `${dataSetCardStyle['dataset-card-main-content']} col-md-7 col-sm-12`\n  }, __jsx(\"div\", {\n    className: `row ${dataSetCardStyle['dataset-card-main-content-inner']}`\n  }, __jsx(\"div\", {\n    className: \"col-6\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-label']\n  }, \"Name: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-value']\n  }, (_dataSet$name = dataSet === null || dataSet === void 0 ? void 0 : dataSet.name) !== null && _dataSet$name !== void 0 ? _dataSet$name : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-papers-label']\n  }, \"Paper(s): \"), ((_dataSet$papers = dataSet === null || dataSet === void 0 ? void 0 : dataSet.papers) !== null && _dataSet$papers !== void 0 ? _dataSet$papers : []).map(item => !!(item === null || item === void 0 ? void 0 : item.url) ? __jsx(\"a\", {\n    className: dataSetCardStyle['dataset-card-papers-value'],\n    target: \"_blank\",\n    href: item.url\n  }, item.label) : __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-papers-value']\n  }, item.label))))), __jsx(\"div\", {\n    className: \"col-6\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-label']\n  }, \"Secondary Region: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-value']\n  }, ((_dataSet$secondary_re = dataSet === null || dataSet === void 0 ? void 0 : dataSet.secondary_region) !== null && _dataSet$secondary_re !== void 0 ? _dataSet$secondary_re : []).join(',')))), !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.layers) && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$layers = dataSet.layers) === null || _dataSet$layers === void 0 ? void 0 : _dataSet$layers.length) > 0 ? __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-label']\n  }, \"Layers: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-value']\n  }, ((_dataSet$layers2 = dataSet === null || dataSet === void 0 ? void 0 : dataSet.layers) !== null && _dataSet$layers2 !== void 0 ? _dataSet$layers2 : []).join(',')))) : null, !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.etype) ? __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-label']\n  }, \"E-Type: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-value']\n  }, (_dataSet$etype = dataSet === null || dataSet === void 0 ? void 0 : dataSet.etype) !== null && _dataSet$etype !== void 0 ? _dataSet$etype : ''))) : null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-right\"\n  }, hasSource ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-source-label']\n  }, \"SOURCE: \", dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) : null))))), __jsx(\"div\", {\n    className: `${dataSetCardStyle['dataset-card-actions-container']} col-md-3 col-sm-12`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, hasDownloadLink ? __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Download\"\n  }, __jsx(ExpandButton, {\n    label: 'Download',\n    icon: __jsx(IconDownload, null),\n    expanded: actionsExpanded,\n    onClick: () => window.open(downloadLink)\n  })))), __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Add to HH Neuron Builder Cart\"\n  }, __jsx(ExpandButton, {\n    label: 'Add to HH Neuron Builder Cart',\n    icon: __jsx(IconSend, null),\n    expanded: actionsExpanded,\n    onClick: () => _selectForModelBuilder()\n  })))))) : null, hasPageLink ? __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: isInternal ? 'View on Site (internal)' : 'View on Site'\n  }, __jsx(ExpandButton, {\n    label: isInternal ? 'View on Site (internal)' : 'View on Site',\n    icon: __jsx(IconLink, {\n      htmlColor: isInternal ? '#0F4C81' : '#000'\n    }),\n    expanded: actionsExpanded,\n    onClick: () => window.open(pageLink)\n  })))) : null)))))));\n}\n\nconst ElectrophysiologyCard = /*#__PURE__*/forwardRef((props, ref) => _DataSetCard(props, ref));\nexport { ElectrophysiologyCard };","map":null,"metadata":{},"sourceType":"module"}
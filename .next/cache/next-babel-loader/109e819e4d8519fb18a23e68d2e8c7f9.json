{"ast":null,"code":"import _toConsumableArray from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/mnt/c/Users/enton/Workspace/cnr/build/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { Card, ListItem, makeStyles, Checkbox, TextField, Tooltip, Typography, IconButton, FormControl, InputLabel, FormControlLabel } from \"@material-ui/core\";\nimport { Select } from \"@material-ui/core\";\nimport { FilterList as IconFilter, Close as IconClose, Check as IconCheck, ClearAll as IconClear } from \"@material-ui/icons\";\nimport filterStyle from './filter.module.scss';\nimport constants from \"../../constants\";\nimport { CustomButton } from \"../buttons/buttons\";\nimport { CustomSearchBar } from \"../customSearchBar\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      zIndex: 10\n    }\n  };\n});\nvar useTextFieldStyles = makeStyles({\n  underline: {\n    color: \"#fff\",\n    \"&:after\": {\n      borderBottomColor: \"#fff\",\n      borderWidth: \"1px\"\n    }\n  }\n});\nvar useLabelStyles = makeStyles(function (theme) {\n  return {\n    headerLabel: {\n      fontFamily: 'Titillium Web, sans-serif',\n      fontSize: 12,\n      fontWeight: 600,\n      textTransform: 'capitalize'\n    },\n    rootFilterLabel: {\n      fontFamily: 'Titillium Web, sans-serif',\n      fontSize: 12,\n      fontWeight: 600,\n      textTransform: 'capitalize'\n    },\n    filterLabel: {\n      fontFamily: 'Titillium Web, sans-serif',\n      fontSize: 11,\n      fontWeight: 600,\n      textTransform: 'capitalize'\n    }\n  };\n});\nvar useIconStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      outline: 'none',\n      '&:hover, &:focus': {\n        outline: 'none'\n      }\n    }\n  };\n});\nexport function FilterBox(_ref) {\n  var filters = _ref.filters,\n      selectedFilters = _ref.selectedFilters,\n      onChangeFilters = _ref.onChangeFilters,\n      closeFilters = _ref.closeFilters,\n      applyFilters = _ref.applyFilters,\n      resetFilters = _ref.resetFilters,\n      variant = _ref.variant;\n  var classes = useStyles();\n  var textFieldStyles = useTextFieldStyles();\n  var iconButtonClasses = useIconStyles();\n  var labelStyles = useLabelStyles();\n  var suggestionFilters = !!filters ? Object.keys(filters).map(function (key) {\n    return filters[key];\n  }) : [];\n\n  var _React$useState = React.useState(suggestionFilters.reduce(function (acc, item) {\n    return acc = _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, item.key, ''));\n  }, {})),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      suggestionValue = _React$useState2[0],\n      setSuggestionValue = _React$useState2[1];\n\n  var _onChangeMultipleFilter = function _onChangeMultipleFilter(key, value, checked) {\n    var newFilters = [];\n\n    if (!!key) {\n      if (key.split('.').length === 1) {\n        newFilters = !!selectedFilters && !!selectedFilters[key] ? _toConsumableArray(selectedFilters[key]) : [];\n      } else {\n        var prefixKey = key.split('.')[0];\n        var itemKey = key.split('.')[1];\n        newFilters = !!selectedFilters && !!selectedFilters[prefixKey] && !!selectedFilters[prefixKey][itemKey] ? _toConsumableArray(selectedFilters[prefixKey][itemKey]) : [];\n      }\n\n      if (!!checked) {\n        newFilters.push(value);\n      } else {\n        var index = newFilters.findIndex(function (v) {\n          return v === value;\n        });\n\n        if (index > -1) {\n          newFilters.splice(index, 1);\n        }\n      }\n\n      onChangeFilters(key, newFilters);\n    }\n  };\n\n  var _onChangeSuggestionValue = function _onChangeSuggestionValue(key, text) {\n    setSuggestionValue(_objectSpread(_objectSpread({}, suggestionValue), {}, _defineProperty({}, key, text)));\n  };\n\n  var renderMultipleFilter = function renderMultipleFilter(key, item, values) {\n    var _item$values, _filterValues$filter;\n\n    var itemValue = null;\n\n    if (!!key) {\n      if (key.split('.').length === 1) {\n        var _selectedFilters$key;\n\n        itemValue = !!selectedFilters ? (_selectedFilters$key = selectedFilters[key]) !== null && _selectedFilters$key !== void 0 ? _selectedFilters$key : null : null;\n      } else {\n        var _selectedFilters$pref;\n\n        var prefixKey = key.split('.')[0];\n        var itemKey = key.split('.')[1];\n        itemValue = !!selectedFilters && selectedFilters[prefixKey] ? (_selectedFilters$pref = selectedFilters[prefixKey][itemKey]) !== null && _selectedFilters$pref !== void 0 ? _selectedFilters$pref : null : null;\n      }\n    }\n\n    var filterValues = !!values ? values : (_item$values = item.values) !== null && _item$values !== void 0 ? _item$values : [];\n    var hasSuggestionFilter = !!suggestionValue[key] && suggestionValue[key].trim().length >= constants.SUGGESTION_MIN_LENGTH;\n    var suggestionsItems = hasSuggestionFilter ? suggestionValue[key].split('|') : [];\n    var filteredItems = hasSuggestionFilter ? (_filterValues$filter = filterValues.filter(function (item) {\n      return suggestionsItems.map(function (suggest) {\n        return item.toLowerCase().includes(suggest === null || suggest === void 0 ? void 0 : suggest.toLowerCase());\n      }).reduce(function (a, b) {\n        return a || b;\n      }, false);\n    })) !== null && _filterValues$filter !== void 0 ? _filterValues$filter : [] : filterValues;\n    var hasItems = !!filteredItems && filteredItems.length > 0;\n    return __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(TextField, {\n      fullWidth: true,\n      key: \"suggestion-\".concat(key),\n      value: suggestionValue[key],\n      label: item === null || item === void 0 ? void 0 : item.label,\n      InputProps: {\n        classes: textFieldStyles\n      },\n      InputLabelProps: {\n        style: {\n          color: (variant !== null && variant !== void 0 ? variant : 'dark') ? '#fff' : '#333',\n          textTransform: 'capitalize'\n        }\n      },\n      onChange: function onChange(event) {\n        return _onChangeSuggestionValue(key, event.target.value);\n      }\n    })), hasItems ? __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"span\", {\n      className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.filterLabel\n    }, item === null || item === void 0 ? void 0 : item.label), __jsx(\"br\", null), (filteredItems !== null && filteredItems !== void 0 ? filteredItems : []).map(function (value) {\n      var _itemValue$includes;\n\n      return __jsx(FormControlLabel, {\n        control: __jsx(Checkbox, {\n          key: value,\n          style: {\n            color: variant === 'dark' ? '#fff' : '#333'\n          },\n          checked: !!itemValue ? (_itemValue$includes = itemValue.includes(value)) !== null && _itemValue$includes !== void 0 ? _itemValue$includes : false : false,\n          onChange: function onChange(event, checked) {\n            return _onChangeMultipleFilter(key, value, checked);\n          }\n        }),\n        label: value\n      });\n    })) : null);\n  };\n\n  var renderSuggestionFilter = function renderSuggestionFilter(key, item) {};\n\n  var renderFilterMap = {\n    'multiple': renderMultipleFilter,\n    'suggestion': renderSuggestionFilter\n  };\n\n  var renderFilter = function renderFilter(key, filter, prefix_key) {\n    if (!filter.type && !!filter.items) {\n      var _filterKeys = !!filters ? Object.keys(filter.items) : [];\n\n      var _sortedFilterKeys = _filterKeys === null || _filterKeys === void 0 ? void 0 : _filterKeys.map(function (itemKey) {\n        return _objectSpread(_objectSpread({}, filter.items[itemKey]), {}, {\n          'root_key': itemKey\n        });\n      }).sort(function (item1, item2) {\n        return item1['order'] - item2['order'];\n      }).map(function (item) {\n        return item['root_key'];\n      });\n\n      return __jsx(\"div\", null, __jsx(\"span\", {\n        className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.rootFilterLabel\n      }, filter === null || filter === void 0 ? void 0 : filter.label), __jsx(\"br\", null), _sortedFilterKeys.map(function (itemKey) {\n        return renderFilter(itemKey, filter.items[itemKey], key);\n      }));\n    }\n\n    var values = null;\n\n    if (!!filter.depends_on && filter.depends_on.length > 0) {\n      var items = [];\n\n      var _iterator = _createForOfIteratorHelper(filter.depends_on),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dependency = _step.value;\n          var dependencyPrefixKey = dependency.split('.')[0];\n          var dependencyKey = dependency.split('.').length > 1 ? dependency.split('.')[1] : dependency.split('.')[0];\n\n          if (dependencyPrefixKey !== dependencyKey) {\n            (function () {\n              var _selectedFilters$depe, _filter$values;\n\n              var filterValues = !!selectedFilters && !!selectedFilters[dependencyPrefixKey] ? (_selectedFilters$depe = selectedFilters[dependencyPrefixKey][dependencyKey]) !== null && _selectedFilters$depe !== void 0 ? _selectedFilters$depe : [] : [];\n\n              var _items = filter === null || filter === void 0 ? void 0 : (_filter$values = filter.values) === null || _filter$values === void 0 ? void 0 : _filter$values.filter(function (item) {\n                return filterValues.includes(item.split(':')[0].trim());\n              });\n\n              items.push.apply(items, _toConsumableArray(_items));\n            })();\n          } else {\n            (function () {\n              var _selectedFilters$depe2, _filter$values2;\n\n              var filterValues = !!selectedFilters ? (_selectedFilters$depe2 = selectedFilters[dependencyKey]) !== null && _selectedFilters$depe2 !== void 0 ? _selectedFilters$depe2 : [] : [];\n\n              var _items = filter === null || filter === void 0 ? void 0 : (_filter$values2 = filter.values) === null || _filter$values2 === void 0 ? void 0 : _filter$values2.filter(function (item) {\n                return filterValues.includes(item.split(':')[0].trim());\n              });\n\n              items.push.apply(items, _toConsumableArray(_items));\n            })();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      values = items;\n\n      if (items.length === 0) {\n        values = filter.values;\n      }\n    }\n\n    if (!!filter.values && filter.values.length > 0) {\n      var computedKey = !!prefix_key && prefix_key.trim().length > 0 ? \"\".concat(prefix_key, \".\").concat(key) : key;\n      var renderMethod = renderFilterMap[filter.type];\n      return renderMethod(computedKey, filter, values);\n    }\n\n    return __jsx(\"div\", null);\n  };\n\n  var filterKeys = !!filters ? Object.keys(filters) : [];\n  var sortedFilterKeys = filterKeys === null || filterKeys === void 0 ? void 0 : filterKeys.map(function (key) {\n    return _objectSpread(_objectSpread({}, filters[key]), {}, {\n      'root_key': key\n    });\n  }).sort(function (item1, item2) {\n    return item1['order'] - item2['order'];\n  }).map(function (item) {\n    return item['root_key'];\n  });\n  return __jsx(Card, {\n    classes: classes\n  }, __jsx(\"div\", {\n    className: \"\".concat(filterStyle['filter-box'], \" \").concat(!!variant ? filterStyle[variant] : '')\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-9\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.headerLabel\n  }, \"Filter\")), __jsx(\"div\", {\n    className: \"col-3 text-right\"\n  }, __jsx(IconButton, {\n    className: iconButtonClasses.root,\n    onClick: function onClick() {\n      return closeFilters();\n    }\n  }, __jsx(IconClose, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  })))), sortedFilterKeys.map(function (key) {\n    var item = filters[key];\n    return renderFilter(key, item);\n  }), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"col-6 text-right\"\n  }, __jsx(Tooltip, {\n    title: \"Reset Filters\"\n  }, __jsx(CustomButton, {\n    style: {\n      \"float\": 'right',\n      minWidth: 200,\n      fontSize: 16\n    },\n    variant: \"secondary\",\n    className: iconButtonClasses.root,\n    onClick: function onClick() {\n      return resetFilters(false);\n    }\n  }, __jsx(IconClear, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }), \"Clear\"))), __jsx(\"div\", {\n    className: \"col-6 text-left\"\n  }, __jsx(Tooltip, {\n    title: \"Apply Filters\"\n  }, __jsx(CustomButton, {\n    style: {\n      \"float\": 'left',\n      minWidth: 200,\n      fontSize: 16\n    },\n    className: iconButtonClasses.root,\n    onClick: function onClick() {\n      return applyFilters();\n    }\n  }, __jsx(IconCheck, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }), \"Apply\"))))));\n}\nexport function FormFilter(_ref2) {\n  var variant = _ref2.variant,\n      query = _ref2.query,\n      filters = _ref2.filters,\n      selectedFilters = _ref2.selectedFilters,\n      selectedHitsPerPage = _ref2.selectedHitsPerPage,\n      onQueryChange = _ref2.onQueryChange,\n      onRequestSearch = _ref2.onRequestSearch,\n      onChangeHitsPerPage = _ref2.onChangeHitsPerPage,\n      onChangeFilters = _ref2.onChangeFilters,\n      applyFilters = _ref2.applyFilters,\n      resetFilters = _ref2.resetFilters;\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openFilter = _React$useState4[0],\n      setOpenFilter = _React$useState4[1];\n\n  var iconButtonClasses = useIconStyles();\n\n  var toggleFilter = function toggleFilter() {\n    setOpenFilter(!openFilter);\n  };\n\n  var _closeFilters = function _closeFilters() {\n    setOpenFilter(false);\n  };\n\n  var _applyFilters = function _applyFilters() {\n    applyFilters();\n    setOpenFilter(false);\n  };\n\n  var _resetFilters = function _resetFilters(close) {\n    resetFilters();\n\n    if (close) {\n      setOpenFilter(false);\n    }\n  };\n\n  var hitsPerPageItems = [10, 20, 50, 100].map(function (item) {\n    return __jsx(ListItem, {\n      key: \"hits_per_page-\".concat(item),\n      value: item,\n      style: {\n        textAlign: 'right',\n        outline: 'none',\n        cursor: 'pointer'\n      }\n    }, item);\n  });\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-9 col-sm-12\"\n  }, __jsx(CustomSearchBar, {\n    value: query,\n    onChange: onQueryChange,\n    onRequestSearch: onRequestSearch,\n    onCancelSearch: function onCancelSearch() {\n      return onQueryChange('');\n    }\n  })), __jsx(\"div\", {\n    className: \"col-md-3 col-sm-12 text-right\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-8\"\n  }, __jsx(FormControl, {\n    style: {\n      minWidth: '100%'\n    }\n  }, __jsx(InputLabel, {\n    style: {\n      color: '#fff'\n    }\n  }, \"Hits per page\"), __jsx(Select, {\n    style: {\n      color: variant === 'dark' ? '#fff' : '#000'\n    },\n    value: selectedHitsPerPage,\n    onChange: function onChange(event) {\n      return onChangeHitsPerPage(event.target.value);\n    }\n  }, hitsPerPageItems))), __jsx(\"div\", {\n    className: \"col-4\"\n  }, __jsx(Tooltip, {\n    title: 'Filter'\n  }, __jsx(IconButton, {\n    className: iconButtonClasses.root,\n    onClick: toggleFilter\n  }, __jsx(IconFilter, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }))))))), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, openFilter ? __jsx(FilterBox, {\n    variant: variant,\n    filters: filters,\n    selectedFilters: selectedFilters,\n    onChangeFilters: onChangeFilters,\n    closeFilters: _closeFilters,\n    applyFilters: _applyFilters,\n    resetFilters: _resetFilters\n  }) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}
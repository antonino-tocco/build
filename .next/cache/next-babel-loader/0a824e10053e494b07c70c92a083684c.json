{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { Form, Input, Button, Select } from 'antd';\nimport { GatewayOutlined, UserOutlined, CloseOutlined } from '@ant-design/icons';\nimport { feedbackUrl, deploymentUrl } from '../../config';\nimport styles from './styles.module.scss';\nconst {\n  TextArea\n} = Input;\nconst {\n  Option\n} = Select;\nconst FEEDBACK_CONTACT_KEY = 'feedbackContact';\nconst storage = false ? window.sessionStorage : null;\n\nconst Feedback = () => {\n  var _storage$getItem;\n\n  const router = useRouter();\n  const {\n    0: formVisible,\n    1: setFormVisible\n  } = useState(false);\n  const issueSelectRef = useRef(null);\n  const {\n    0: type,\n    1: setType\n  } = useState(null);\n  const {\n    0: component,\n    1: setComponent\n  } = useState('');\n  const {\n    0: details,\n    1: setDetails\n  } = useState('');\n  const {\n    0: contact,\n    1: setContact\n  } = useState((_storage$getItem = storage === null || storage === void 0 ? void 0 : storage.getItem(FEEDBACK_CONTACT_KEY)) !== null && _storage$getItem !== void 0 ? _storage$getItem : '');\n  const {\n    0: sending,\n    1: setSending\n  } = useState(false);\n  const {\n    0: responseStatus,\n    1: setResponseStatus\n  } = useState(null);\n\n  const onContactChange = value => {\n    storage === null || storage === void 0 ? void 0 : storage.setItem(FEEDBACK_CONTACT_KEY, value);\n    setContact(value);\n  };\n\n  const showForm = () => {\n    var _issueSelectRef$curre;\n\n    setFormVisible(true);\n    issueSelectRef === null || issueSelectRef === void 0 ? void 0 : (_issueSelectRef$curre = issueSelectRef.current) === null || _issueSelectRef$curre === void 0 ? void 0 : _issueSelectRef$curre.focus();\n  };\n\n  const closeForm = () => {\n    setFormVisible(false);\n    setTimeout(() => {\n      setType(null);\n      setComponent('');\n      setDetails('');\n      setResponseStatus(null);\n    }, 200);\n  };\n\n  const sendFeedback = async () => {\n    setResponseStatus(null);\n    setSending(true);\n    const pageUrl = `${deploymentUrl}${router.basePath}${router.asPath}`;\n    const labels = ['triage'];\n\n    if (router.basePath.startsWith('/model')) {\n      labels.push('section: explore');\n    } else if (router.basePath.startsWith('/build')) {\n      labels.push('section: build');\n    }\n\n    try {\n      const res = await fetch(`${feedbackUrl}/hippocampushub/hh-feedback`, {\n        method: 'POST',\n        body: JSON.stringify({\n          labels,\n          title: details.slice(0, 100),\n          body: [`Field | Element`, `--- | ---`, `Issue type | ${type || '--'}`, `Page URL | [${router.asPath}](${pageUrl})`, `Component | ${component || '--'}`, `Contact | ${contact || '--'}`, ``, `${details.slice(100)}`].join('\\n')\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.ok) {\n        setResponseStatus('success');\n        setTimeout(closeForm, 1000);\n      } else setResponseStatus('error');\n\n      setSending(false);\n    } catch (e) {\n      setResponseStatus('error');\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: `${formVisible ? styles.formVisible : ''}`\n  }, __jsx(\"div\", {\n    className: styles.feedbackButton,\n    onClick: showForm\n  }, \"Feedback\"), __jsx(\"div\", {\n    id: \"feedbackForm\",\n    className: styles.form\n  }, __jsx(\"div\", {\n    className: styles.closeBtn\n  }, __jsx(Button, {\n    shape: \"circle\",\n    type: \"primary\",\n    danger: true,\n    icon: __jsx(CloseOutlined, null),\n    onClick: closeForm\n  })), __jsx(Form, {\n    size: \"small\",\n    onSubmitCapture: sendFeedback\n  }, __jsx(Form.Item, null, __jsx(Select, {\n    placeholder: \"Feedback type (optional)\",\n    ref: issueSelectRef,\n    disabled: sending,\n    getPopupContainer: () => document.getElementById('feedbackForm'),\n    value: type,\n    onChange: value => setType(value)\n  }, __jsx(Option, {\n    value: \"content\"\n  }, \"Content\"), __jsx(Option, {\n    value: \"layout\"\n  }, \"Layout, UI\"), __jsx(Option, {\n    value: \"navigation\"\n  }, \"Navigation, UX\"))), __jsx(Form.Item, null, __jsx(Input, {\n    placeholder: \"Component / page section (optional)\",\n    prefix: __jsx(GatewayOutlined, null),\n    disabled: sending,\n    value: component,\n    onChange: e => setComponent(e.target.value)\n  })), __jsx(Form.Item, null, __jsx(TextArea, {\n    placeholder: \"Tell us about your experience...\",\n    rows: 4,\n    disabled: sending,\n    autoSize: {\n      minRows: 4,\n      maxRows: 4\n    },\n    value: details,\n    onChange: e => setDetails(e.target.value)\n  })), __jsx(Form.Item, null, __jsx(Input, {\n    placeholder: \"Contact name / email (optional)\",\n    prefix: __jsx(UserOutlined, null),\n    disabled: sending,\n    value: contact,\n    onChange: e => onContactChange(e.target.value),\n    onPressEnter: sendFeedback\n  })), __jsx(Form.Item, {\n    className: \"text-right mb-0\"\n  }, responseStatus === 'success' && __jsx(\"span\", {\n    className: \"mr-1\"\n  }, \"Sent, thank you!\"), responseStatus === 'error' && __jsx(\"span\", {\n    className: \"mr-1 text-red\"\n  }, \"Oops, something went wrong\"), __jsx(Button, {\n    className: styles.sendBtn,\n    type: \"primary\",\n    danger: true,\n    disabled: !details || responseStatus === 'success',\n    loading: sending,\n    onClick: sendFeedback\n  }, sending ? 'Sending' : 'Send')))));\n};\n\nexport default Feedback;","map":null,"metadata":{},"sourceType":"module"}
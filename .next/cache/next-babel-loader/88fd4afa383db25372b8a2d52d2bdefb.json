{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { Card, ListItem, makeStyles, Checkbox, TextField, Tooltip, Typography, IconButton, FormControl, InputLabel, FormControlLabel } from \"@material-ui/core\";\nimport { Select } from \"@material-ui/core\";\nimport { FilterList as IconFilter, Close as IconClose, Check as IconCheck, ClearAll as IconClear } from \"@material-ui/icons\";\nimport filterStyle from './filter.module.scss';\nimport constants from \"../../constants\";\nimport { CustomButton } from \"../buttons/buttons\";\nimport { CustomSearchBar } from \"../customSearchBar\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    zIndex: 10\n  }\n}));\nconst useTextFieldStyles = makeStyles({\n  underline: {\n    color: \"#fff\",\n    \"&:after\": {\n      borderBottomColor: \"#fff\",\n      borderWidth: \"1px\"\n    }\n  }\n});\nconst useLabelStyles = makeStyles(theme => ({\n  headerLabel: {\n    fontFamily: 'Titillium Web, sans-serif',\n    fontSize: 12,\n    fontWeight: 600,\n    textTransform: 'capitalize'\n  },\n  rootFilterLabel: {\n    fontFamily: 'Titillium Web, sans-serif',\n    fontSize: 12,\n    fontWeight: 600,\n    textTransform: 'capitalize'\n  },\n  filterLabel: {\n    fontFamily: 'Titillium Web, sans-serif',\n    fontSize: 11,\n    fontWeight: 600,\n    textTransform: 'capitalize'\n  }\n}));\nconst useIconStyles = makeStyles(theme => ({\n  root: {\n    outline: 'none',\n    '&:hover, &:focus': {\n      outline: 'none'\n    }\n  }\n}));\nexport function FilterBox({\n  filters,\n  selectedFilters,\n  onChangeFilters,\n  closeFilters,\n  applyFilters,\n  resetFilters,\n  variant\n}) {\n  const classes = useStyles();\n  const textFieldStyles = useTextFieldStyles();\n  const iconButtonClasses = useIconStyles();\n  const labelStyles = useLabelStyles();\n  const suggestionFilters = !!filters ? Object.keys(filters).map(key => filters[key]) : [];\n  const [suggestionValue, setSuggestionValue] = React.useState(suggestionFilters.reduce((acc, item) => acc = _objectSpread(_objectSpread({}, acc), {}, {\n    [item.key]: ''\n  }), {}));\n\n  const _onChangeMultipleFilter = (key, value, checked) => {\n    let newFilters = [];\n\n    if (!!key) {\n      if (key.split('.').length === 1) {\n        newFilters = !!selectedFilters && !!selectedFilters[key] ? [...selectedFilters[key]] : [];\n      } else {\n        const prefixKey = key.split('.')[0];\n        const itemKey = key.split('.')[1];\n        newFilters = !!selectedFilters && !!selectedFilters[prefixKey] && !!selectedFilters[prefixKey][itemKey] ? [...selectedFilters[prefixKey][itemKey]] : [];\n      }\n\n      if (!!checked) {\n        newFilters.push(value);\n      } else {\n        const index = newFilters.findIndex(v => v === value);\n\n        if (index > -1) {\n          newFilters.splice(index, 1);\n        }\n      }\n\n      onChangeFilters(key, newFilters);\n    }\n  };\n\n  const _onChangeSuggestionValue = (key, text) => {\n    setSuggestionValue(_objectSpread(_objectSpread({}, suggestionValue), {}, {\n      [key]: text\n    }));\n  };\n\n  const renderMultipleFilter = (key, item, values) => {\n    var _item$values, _filterValues$filter;\n\n    let itemValue = null;\n\n    if (!!key) {\n      if (key.split('.').length === 1) {\n        var _selectedFilters$key;\n\n        itemValue = !!selectedFilters ? (_selectedFilters$key = selectedFilters[key]) !== null && _selectedFilters$key !== void 0 ? _selectedFilters$key : null : null;\n      } else {\n        var _selectedFilters$pref;\n\n        const prefixKey = key.split('.')[0];\n        const itemKey = key.split('.')[1];\n        itemValue = !!selectedFilters && selectedFilters[prefixKey] ? (_selectedFilters$pref = selectedFilters[prefixKey][itemKey]) !== null && _selectedFilters$pref !== void 0 ? _selectedFilters$pref : null : null;\n      }\n    }\n\n    const filterValues = !!values ? values : (_item$values = item.values) !== null && _item$values !== void 0 ? _item$values : [];\n    const hasSuggestionFilter = !!suggestionValue[key] && suggestionValue[key].trim().length >= constants.SUGGESTION_MIN_LENGTH;\n    const suggestionsItems = hasSuggestionFilter ? suggestionValue[key].split('|') : [];\n    const filteredItems = hasSuggestionFilter ? (_filterValues$filter = filterValues.filter(item => suggestionsItems.map(suggest => item.toLowerCase().includes(suggest === null || suggest === void 0 ? void 0 : suggest.toLowerCase())).reduce((a, b) => a || b, false))) !== null && _filterValues$filter !== void 0 ? _filterValues$filter : [] : filterValues;\n    const hasItems = !!filteredItems && filteredItems.length > 0;\n    return __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(TextField, {\n      fullWidth: true,\n      key: `suggestion-${key}`,\n      value: suggestionValue[key],\n      label: item === null || item === void 0 ? void 0 : item.label,\n      InputProps: {\n        classes: textFieldStyles\n      },\n      InputLabelProps: {\n        style: {\n          color: (variant !== null && variant !== void 0 ? variant : 'dark') ? '#fff' : '#333',\n          textTransform: 'capitalize'\n        }\n      },\n      onChange: event => _onChangeSuggestionValue(key, event.target.value)\n    })), hasItems ? __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"span\", {\n      className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.filterLabel\n    }, item === null || item === void 0 ? void 0 : item.label), __jsx(\"br\", null), (filteredItems !== null && filteredItems !== void 0 ? filteredItems : []).map(value => {\n      var _itemValue$includes;\n\n      return __jsx(FormControlLabel, {\n        control: __jsx(Checkbox, {\n          key: value,\n          style: {\n            color: variant === 'dark' ? '#fff' : '#333'\n          },\n          checked: !!itemValue ? (_itemValue$includes = itemValue.includes(value)) !== null && _itemValue$includes !== void 0 ? _itemValue$includes : false : false,\n          onChange: (event, checked) => _onChangeMultipleFilter(key, value, checked)\n        }),\n        label: value\n      });\n    })) : null);\n  };\n\n  const renderSuggestionFilter = (key, item) => {};\n\n  const renderFilterMap = {\n    'multiple': renderMultipleFilter,\n    'suggestion': renderSuggestionFilter\n  };\n\n  const renderFilter = (key, filter, prefix_key) => {\n    if (!filter.type && !!filter.items) {\n      const filterKeys = !!filters ? Object.keys(filter.items) : [];\n      const sortedFilterKeys = filterKeys === null || filterKeys === void 0 ? void 0 : filterKeys.map(itemKey => _objectSpread(_objectSpread({}, filter.items[itemKey]), {}, {\n        'root_key': itemKey\n      })).sort((item1, item2) => item1['order'] - item2['order']).map(item => item['root_key']);\n      return __jsx(\"div\", null, __jsx(\"span\", {\n        className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.rootFilterLabel\n      }, filter === null || filter === void 0 ? void 0 : filter.label), __jsx(\"br\", null), sortedFilterKeys.map(itemKey => renderFilter(itemKey, filter.items[itemKey], key)));\n    }\n\n    let values = null;\n\n    if (!!filter.depends_on && filter.depends_on.length > 0) {\n      const items = [];\n\n      for (let dependency of filter.depends_on) {\n        const dependencyPrefixKey = dependency.split('.')[0];\n        const dependencyKey = dependency.split('.').length > 1 ? dependency.split('.')[1] : dependency.split('.')[0];\n\n        if (dependencyPrefixKey !== dependencyKey) {\n          var _selectedFilters$depe, _filter$values;\n\n          const filterValues = !!selectedFilters && !!selectedFilters[dependencyPrefixKey] ? (_selectedFilters$depe = selectedFilters[dependencyPrefixKey][dependencyKey]) !== null && _selectedFilters$depe !== void 0 ? _selectedFilters$depe : [] : [];\n\n          const _items = filter === null || filter === void 0 ? void 0 : (_filter$values = filter.values) === null || _filter$values === void 0 ? void 0 : _filter$values.filter(item => filterValues.includes(item.split(':')[0].trim()));\n\n          items.push(..._items);\n        } else {\n          var _selectedFilters$depe2, _filter$values2;\n\n          const filterValues = !!selectedFilters ? (_selectedFilters$depe2 = selectedFilters[dependencyKey]) !== null && _selectedFilters$depe2 !== void 0 ? _selectedFilters$depe2 : [] : [];\n\n          const _items = filter === null || filter === void 0 ? void 0 : (_filter$values2 = filter.values) === null || _filter$values2 === void 0 ? void 0 : _filter$values2.filter(item => filterValues.includes(item.split(':')[0].trim()));\n\n          items.push(..._items);\n        }\n      }\n\n      values = items;\n\n      if (items.length === 0) {\n        values = filter.values;\n      }\n    }\n\n    if (!!filter.values && filter.values.length > 0) {\n      const computedKey = !!prefix_key && prefix_key.trim().length > 0 ? `${prefix_key}.${key}` : key;\n      const renderMethod = renderFilterMap[filter.type];\n      return renderMethod(computedKey, filter, values);\n    }\n\n    return __jsx(\"div\", null);\n  };\n\n  const filterKeys = !!filters ? Object.keys(filters) : [];\n  const sortedFilterKeys = filterKeys === null || filterKeys === void 0 ? void 0 : filterKeys.map(key => _objectSpread(_objectSpread({}, filters[key]), {}, {\n    'root_key': key\n  })).sort((item1, item2) => item1['order'] - item2['order']).map(item => item['root_key']);\n  return __jsx(Card, {\n    classes: classes\n  }, __jsx(\"div\", {\n    className: `${filterStyle['filter-box']} ${!!variant ? filterStyle[variant] : ''}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-9\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    className: labelStyles === null || labelStyles === void 0 ? void 0 : labelStyles.headerLabel\n  }, \"Filter\")), __jsx(\"div\", {\n    className: \"col-3 text-right\"\n  }, __jsx(IconButton, {\n    className: iconButtonClasses.root,\n    onClick: () => closeFilters()\n  }, __jsx(IconClose, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  })))), sortedFilterKeys.map(key => {\n    const item = filters[key];\n    return renderFilter(key, item);\n  }), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"col-6 text-right\"\n  }, __jsx(Tooltip, {\n    title: \"Reset Filters\"\n  }, __jsx(CustomButton, {\n    style: {\n      float: 'right',\n      minWidth: 200,\n      fontSize: 16\n    },\n    variant: \"secondary\",\n    className: iconButtonClasses.root,\n    onClick: () => resetFilters(false)\n  }, __jsx(IconClear, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }), \"Clear\"))), __jsx(\"div\", {\n    className: \"col-6 text-left\"\n  }, __jsx(Tooltip, {\n    title: \"Apply Filters\"\n  }, __jsx(CustomButton, {\n    style: {\n      float: 'left',\n      minWidth: 200,\n      fontSize: 16\n    },\n    className: iconButtonClasses.root,\n    onClick: () => applyFilters()\n  }, __jsx(IconCheck, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }), \"Apply\"))))));\n}\nexport function FormFilter({\n  variant,\n  query,\n  filters,\n  selectedFilters,\n  selectedHitsPerPage,\n  onQueryChange,\n  onRequestSearch,\n  onChangeHitsPerPage,\n  onChangeFilters,\n  applyFilters,\n  resetFilters\n}) {\n  const [openFilter, setOpenFilter] = React.useState(false);\n  const iconButtonClasses = useIconStyles();\n\n  const toggleFilter = () => {\n    setOpenFilter(!openFilter);\n  };\n\n  const _closeFilters = () => {\n    setOpenFilter(false);\n  };\n\n  const _applyFilters = () => {\n    applyFilters();\n    setOpenFilter(false);\n  };\n\n  const _resetFilters = close => {\n    resetFilters();\n\n    if (close) {\n      setOpenFilter(false);\n    }\n  };\n\n  const hitsPerPageItems = [10, 20, 50, 100].map(item => __jsx(ListItem, {\n    key: `hits_per_page-${item}`,\n    value: item,\n    style: {\n      textAlign: 'right',\n      outline: 'none',\n      cursor: 'pointer'\n    }\n  }, item));\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-9 col-sm-12\"\n  }, __jsx(CustomSearchBar, {\n    value: query,\n    onChange: onQueryChange,\n    onRequestSearch: onRequestSearch,\n    onCancelSearch: () => onQueryChange('')\n  })), __jsx(\"div\", {\n    className: \"col-md-3 col-sm-12 text-right\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-8\"\n  }, __jsx(FormControl, {\n    style: {\n      minWidth: '100%'\n    }\n  }, __jsx(InputLabel, {\n    style: {\n      color: '#fff'\n    }\n  }, \"Hits per page\"), __jsx(Select, {\n    style: {\n      color: variant === 'dark' ? '#fff' : '#000'\n    },\n    value: selectedHitsPerPage,\n    onChange: event => onChangeHitsPerPage(event.target.value)\n  }, hitsPerPageItems))), __jsx(\"div\", {\n    className: \"col-4\"\n  }, __jsx(Tooltip, {\n    title: 'Filter'\n  }, __jsx(IconButton, {\n    className: iconButtonClasses.root,\n    onClick: toggleFilter\n  }, __jsx(IconFilter, {\n    htmlColor: variant === 'dark' ? '#fff' : null\n  }))))))), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, openFilter ? __jsx(FilterBox, {\n    variant: variant,\n    filters: filters,\n    selectedFilters: selectedFilters,\n    onChangeFilters: onChangeFilters,\n    closeFilters: _closeFilters,\n    applyFilters: _applyFilters,\n    resetFilters: _resetFilters\n  }) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}
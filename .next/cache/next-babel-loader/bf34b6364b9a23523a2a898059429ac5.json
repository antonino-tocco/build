{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { Close as IconClose } from '@material-ui/icons';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core';\nimport { checkIfNotEmpty } from \"../../helpers/validatorHelper\";\nimport parse from 'html-react-parser';\nimport dialogContainerStyle from './dialog.module.scss';\nimport { useIconButtonStyles } from \"../../style/style\";\nimport { CustomButton } from \"../buttons/buttons\";\n\nconst useDialogStyles = height => makeStyles(theme => ({\n  paper: {\n    borderTop: '10px solid #333',\n    borderRadius: 10,\n    height: height !== null && height !== void 0 ? height : 'auto'\n  }\n}));\n\nexport function DialogContainer(_ref) {\n  let {\n    open,\n    title,\n    subtitle,\n    children,\n    actions,\n    height,\n    onClose\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"open\", \"title\", \"subtitle\", \"children\", \"actions\", \"height\", \"onClose\"]);\n\n  const classes = useDialogStyles(height)();\n  const iconButtonStyles = useIconButtonStyles();\n  return __jsx(Dialog, _extends({\n    classes: classes,\n    open: open\n  }, props), __jsx(DialogTitle, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-10\"\n  }, checkIfNotEmpty(title) ? __jsx(\"p\", {\n    className: dialogContainerStyle['dialog-title']\n  }, title) : null, checkIfNotEmpty(subtitle) ? __jsx(\"p\", {\n    className: dialogContainerStyle['dialog-subtitle']\n  }, parse(subtitle)) : null), __jsx(\"div\", {\n    className: \"col-2 text-right\"\n  }, __jsx(IconButton, {\n    onClick: onClose,\n    className: iconButtonStyles.root\n  }, __jsx(IconClose, null))))), __jsx(DialogContent, null, children), !!actions && actions.length > 0 ? __jsx(DialogActions, null, actions === null || actions === void 0 ? void 0 : actions.map(item => __jsx(CustomButton, {\n    onClick: () => item.onClick()\n  }, item.label))) : null);\n}","map":null,"metadata":{},"sourceType":"module"}
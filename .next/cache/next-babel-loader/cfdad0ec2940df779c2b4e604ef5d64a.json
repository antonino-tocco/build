{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { getPage } from \"../../helpers/dataHelper\";\nimport Spinner from \"../../components/spinner/spinner\";\nimport PageContainer from \"../../components/page/pageContainer\";\nimport { CustomButton } from \"../../components/buttons/buttons\";\nimport { downloadAllModels, downloadModels, getFilters, searchModels } from \"../../helpers/apiHelper\";\nimport constants from \"../../constants\";\nimport pageContentStyle from '../page.module.scss';\nimport { ItemsCountBaloon } from \"../../components/baloons/itemsCountBaloon\";\nimport { ModelCard } from \"../../components/cards/modelCard\";\nimport { FormFilter } from \"../../components/forms/filter\";\nimport { CloudDownload as IconDownload } from \"@material-ui/icons\";\nimport { hashCode } from \"../../helpers/hashHelper\";\nimport { HodgkinHuxleyBaloon } from \"../../components/hodgkin-huxley-baloon\";\nimport { addModFile, removeElectrophysiology, removeModFile, setMorphology, clear } from \"../../actions/hodgkinHuxley.actions\";\n\nconst _ModelsPage = props => {\n  var _page$variant;\n\n  const [loading, setLoading] = React.useState(true);\n  const [page, setPage] = React.useState({});\n  const [models, setModels] = React.useState([]);\n  const [filters, setFilters] = React.useState(null);\n  const [selectedFilters, setSelectedFilters] = React.useState(null);\n  const [selectedQuery, setSelectedQuery] = React.useState('');\n  const [selectedForDownloads, setSelectedForDownloads] = React.useState([]);\n  const [numPage, setNumPage] = React.useState(0);\n  const [totalPages, setTotalPages] = React.useState(1);\n  const [totalItems, setTotalItems] = React.useState(0);\n  const [hitsPerPage, setHitsPerPage] = React.useState(constants.DEFAULT_HITS_PER_PAGE);\n  const {\n    selectedMorphologyForBuilding,\n    selectedElectrophysiologiesForBuilding,\n    selectedModFilesForBuilding,\n    setMorphologyForBuilding,\n    removeElectrophysiologyForBuilding,\n    addModFileForBuilding,\n    removeModFileForBuilding,\n    clearHodgkinHuxley\n  } = props;\n  useEffect(() => {\n    setup();\n  }, []);\n\n  const setup = async () => {\n    try {\n      const _filters = await getFilters({\n        indexName: 'model'\n      });\n\n      const _page = await getPage('models');\n\n      const {\n        total_page: _totalPages,\n        total: _totalItems,\n        items\n      } = await searchModels({\n        query: selectedQuery,\n        page: numPage\n      });\n      setPage(_page);\n      setFilters(_filters);\n      setTotalPages(_totalPages);\n      setTotalItems(_totalItems);\n      setModels(items);\n      setLoading(false);\n    } catch (error) {}\n  };\n\n  const _search = async ({\n    query,\n    filters,\n    hitsPerPage\n  } = {}) => {\n    console.log('@@@@requestSearch');\n    const page = 0;\n    setNumPage(0);\n    setLoading(true);\n\n    const _filters = filters !== undefined ? filters : selectedFilters;\n\n    const {\n      total_page: _totalPages,\n      total: _totalItems,\n      items\n    } = await searchModels({\n      query: query !== null && query !== void 0 ? query : selectedQuery,\n      filters: _filters,\n      page,\n      hitsPerPage\n    });\n    setModels(items);\n    setTotalPages(_totalPages);\n    setTotalItems(_totalItems);\n    setLoading(false);\n  };\n\n  const _loadMore = async () => {\n    const page = numPage + 1;\n    setNumPage(page);\n    setLoading(true);\n    const {\n      total_page: _totalPages,\n      total: _totalItems,\n      items\n    } = await searchModels({\n      query: selectedQuery,\n      filters: selectedFilters,\n      page\n    });\n    const allDataSets = [...models, ...items];\n    setModels(allDataSets);\n    setTotalItems(_totalItems);\n    setTotalPages(_totalPages);\n    setLoading(false);\n  };\n\n  const _onHitsPerPageChange = async value => {\n    setHitsPerPage(value);\n    await _search({\n      hitsPerPage: value\n    });\n  };\n\n  const _onChangeQuery = async query => {\n    var _query$trim;\n\n    setSelectedQuery(query);\n\n    if ((query === null || query === void 0 ? void 0 : (_query$trim = query.trim()) === null || _query$trim === void 0 ? void 0 : _query$trim.length) < constants.MIN_SEARCH_LENGTH) {\n      await _search({\n        query\n      });\n    }\n  };\n\n  const _applyFilters = async () => {\n    await _search();\n  };\n\n  const _resetFilters = async () => {\n    setSelectedFilters(null);\n    await _search({\n      query: '',\n      filters: null\n    });\n  };\n\n  const _downloadAll = () => {\n    window.open(downloadAllModels());\n  };\n\n  const _downloadSelectedDatasets = () => {\n    window.open(downloadModels(selectedForDownloads));\n  };\n\n  const _toggleSelectForDownload = async (id, selected) => {\n    console.log('@@@@@@@toggleSelectForDownload', id, selected);\n\n    if (selected) {\n      const newValues = [...selectedForDownloads];\n      newValues.push(id);\n      setSelectedForDownloads(newValues);\n    } else {\n      const newValues = [...selectedForDownloads];\n      const elIndex = newValues.indexOf(id);\n\n      if (elIndex > -1) {\n        newValues.splice(elIndex, 1);\n        setSelectedForDownloads(newValues);\n      }\n    }\n  };\n\n  const _toggleModFileForBuilding = (item, checked) => {\n    if (!!checked) {\n      addModFileForBuilding(item);\n    } else {\n      removeModFileForBuilding(item);\n    }\n  };\n\n  const _isModFileSelected = item => {\n    const _modFiles = [...(selectedModFilesForBuilding !== null && selectedModFilesForBuilding !== void 0 ? selectedModFilesForBuilding : [])];\n\n    const index = _modFiles.findIndex(value => hashCode(JSON.stringify(item)) == hashCode(JSON.stringify(value)));\n\n    return index > -1;\n  };\n\n  const hasMoreItems = numPage < totalPages - 1;\n  const hasData = !!models && models.length > 0;\n  const countBaloonClassName = !!selectedForDownloads && !!selectedForDownloads && selectedForDownloads.length > 0 ? 'col-md-6' : 'col-md-8';\n  const downloadBlockClassName = !!selectedForDownloads && !!selectedForDownloads && selectedForDownloads.length > 0 ? 'col-md-6' : 'col-md-4';\n  const pageVariant = (_page$variant = page === null || page === void 0 ? void 0 : page.variant) !== null && _page$variant !== void 0 ? _page$variant : 'dark';\n  return __jsx(PageContainer, {\n    variant: pageVariant,\n    mainClassName: 'with-fixed-header',\n    fixedHeader: true\n  }, __jsx(\"div\", {\n    className: `container ${pageContentStyle['page-container']}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: `${pageContentStyle['page-header-label']} text-center`\n  }, page.title), __jsx(\"div\", {\n    className: pageContentStyle['page-header-divider']\n  }))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, page.content)), __jsx(\"section\", null, __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(FormFilter, {\n    variant: pageVariant,\n    query: selectedQuery,\n    filters: filters,\n    selectedFilters: selectedFilters,\n    selectedHitsPerPage: hitsPerPage,\n    onQueryChange: value => _onChangeQuery(value),\n    onRequestSearch: () => _search(),\n    onChangeHitsPerPage: value => _onHitsPerPageChange(value),\n    onChangeFilters: (key, value) => setSelectedFilters(_objectSpread(_objectSpread({}, selectedFilters), {}, {\n      [key]: value\n    })),\n    applyFilters: () => _applyFilters(),\n    resetFilters: () => _resetFilters()\n  }))), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: `${countBaloonClassName}`\n  }, __jsx(ItemsCountBaloon, {\n    label: \"Total items\",\n    count: totalItems\n  })), __jsx(\"div\", {\n    className: `${downloadBlockClassName} text-right`\n  }, !!selectedForDownloads && selectedForDownloads.length > 0 ? __jsx(CustomButton, {\n    onClick: () => _downloadSelectedDatasets(),\n    style: {\n      marginLeft: 10\n    }\n  }, __jsx(IconDownload, null), \" \", __jsx(\"span\", {\n    style: {\n      marginLeft: 5\n    }\n  }, \"Download Selected\")) : null)), __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(HodgkinHuxleyBaloon, {\n    variant: pageVariant,\n    morphology: selectedMorphologyForBuilding,\n    electrophysiologies: selectedElectrophysiologiesForBuilding,\n    modFiles: selectedModFilesForBuilding,\n    removeMorphology: () => setMorphologyForBuilding(null),\n    removeElectrophysiology: item => removeElectrophysiologyForBuilding(item),\n    removeModFile: item => removeModFileForBuilding(item),\n    clear: () => clearHodgkinHuxley()\n  }))), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, !hasData ? __jsx(\"p\", null, loading ? '' : 'There are not data for search criteria') : __jsx(\"div\", null, (models !== null && models !== void 0 ? models : []).map(item => __jsx(\"div\", {\n    className: \"row\",\n    key: `row-dataset-${item === null || item === void 0 ? void 0 : item.id}`\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(ModelCard, {\n    model: item,\n    selectedForDownload: selectedForDownloads.includes(item['source_id']),\n    toggleSelectedForDownload: _toggleSelectForDownload,\n    toggleModFileForBuilding: _toggleModFileForBuilding,\n    isModFileSelected: _isModFileSelected\n  }))))))), hasMoreItems ? __jsx(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20\n    }\n  }, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(CustomButton, {\n    variant: \"primary\",\n    style: {\n      margin: '0 auto'\n    },\n    onClick: () => _loadMore()\n  }, \"Load More\"))) : null), loading ? __jsx(Spinner, null) : null));\n};\n\nconst mapStateToProps = (state, props) => {\n  var _state$hodgkinHuxley$, _state$hodgkinHuxley, _state$hodgkinHuxley$2, _state$hodgkinHuxley2, _state$hodgkinHuxley$3, _state$hodgkinHuxley3;\n\n  return {\n    selectedMorphologyForBuilding: (_state$hodgkinHuxley$ = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley = state.hodgkinHuxley) === null || _state$hodgkinHuxley === void 0 ? void 0 : _state$hodgkinHuxley.morphology) !== null && _state$hodgkinHuxley$ !== void 0 ? _state$hodgkinHuxley$ : null,\n    selectedElectrophysiologiesForBuilding: (_state$hodgkinHuxley$2 = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley2 = state.hodgkinHuxley) === null || _state$hodgkinHuxley2 === void 0 ? void 0 : _state$hodgkinHuxley2.electrophysiologies) !== null && _state$hodgkinHuxley$2 !== void 0 ? _state$hodgkinHuxley$2 : null,\n    selectedModFilesForBuilding: (_state$hodgkinHuxley$3 = state === null || state === void 0 ? void 0 : (_state$hodgkinHuxley3 = state.hodgkinHuxley) === null || _state$hodgkinHuxley3 === void 0 ? void 0 : _state$hodgkinHuxley3.modFiles) !== null && _state$hodgkinHuxley$3 !== void 0 ? _state$hodgkinHuxley$3 : []\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setMorphologyForBuilding: item => dispatch(setMorphology(item)),\n  removeElectrophysiologyForBuilding: item => dispatch(removeElectrophysiology(item)),\n  addModFileForBuilding: item => dispatch(addModFile(item)),\n  removeModFileForBuilding: item => dispatch(removeModFile(item)),\n  clearHodgkinHuxley: () => dispatch(clear())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(_ModelsPage);","map":null,"metadata":{},"sourceType":"module"}
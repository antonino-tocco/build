{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { checkIfEmailValid, checkIfNotEmpty } from \"../../helpers/validatorHelper\";\nimport { Button, makeStyles, TextField, Typography } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport Spinner from \"../spinner/spinner\";\nconst useFormStyles = makeStyles(theme => ({\n  header: {\n    fontFamily: 'Nunito, sans-serif',\n    fontSize: 24,\n    fontWeight: 600\n  }\n}));\nconst useFormRowStyles = makeStyles(theme => ({\n  row: {\n    marginBottom: 20\n  }\n}));\nconst useSubmitButtonStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  }\n}));\nconst useAlertStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  }\n}));\n\nfunction ContactForm() {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState({\n    name: true,\n    email: true,\n    message: true\n  });\n  const {\n    0: actionDisabled,\n    1: setActionDisabled\n  } = useState(true);\n\n  const _sendMessage = async () => {\n    setLoading(true);\n\n    try {\n      setSuccess(true);\n    } catch (error) {}\n\n    setLoading(false);\n  };\n\n  const _validateData = () => {\n    let _actionDisabled = false;\n    let isValidName = checkIfNotEmpty(name);\n    let isValidEmail = checkIfEmailValid(email);\n    let isValidMessage = checkIfNotEmpty(message);\n\n    const _error = _objectSpread({}, error);\n\n    _error.name = !isValidName;\n    _error.email = !isValidEmail;\n    _error.message = !isValidMessage;\n    _actionDisabled = !(isValidName && isValidEmail && isValidMessage);\n    setError(_error);\n    setActionDisabled(_actionDisabled);\n  };\n\n  const formClasses = useFormStyles();\n  const formRowClasses = useFormRowStyles();\n  const submitButtonClasses = useSubmitButtonStyles();\n  const alertClasses = useAlertStyles();\n  useEffect(() => {\n    _validateData();\n  }, [name, email, message]);\n  return __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    }\n  }, __jsx(\"form\", {\n    className: \"form\"\n  }, __jsx(Typography, {\n    className: formClasses.header,\n    gutterBottom: true\n  }, \"Contattaci\"), __jsx(\"div\", {\n    className: `input-group ${formRowClasses.row}`\n  }, __jsx(TextField, {\n    name: \"name\",\n    fullWidth: true,\n    label: 'Il tuo nome',\n    variant: 'outlined',\n    defaultValue: name,\n    onChange: event => setName(event.target.value),\n    helperText: 'Campo richiesto'\n  })), __jsx(\"div\", {\n    className: `input-group ${formRowClasses.row}`\n  }, __jsx(TextField, {\n    name: \"email\",\n    fullWidth: true,\n    label: 'La tua email',\n    variant: 'outlined',\n    onChange: event => setEmail(event.target.value),\n    helperText: 'Inserisci un indirizzo email valido'\n  })), __jsx(\"div\", {\n    className: `input-group ${formRowClasses.row}`\n  }, __jsx(TextField, {\n    name: \"message\",\n    fullWidth: true,\n    label: 'Il tuo messaggio',\n    variant: 'outlined',\n    helperText: 'Campo richiesto',\n    multiline: true,\n    rowsMax: 4,\n    onChange: event => setMessage(event.target.value)\n  })), __jsx(\"div\", {\n    className: `input-group ${formRowClasses.row}`\n  }, __jsx(Button, {\n    classes: submitButtonClasses,\n    variant: \"outlined\",\n    disabled: actionDisabled,\n    onClick: () => _sendMessage()\n  }, \"INVIA\")), __jsx(\"div\", {\n    className: `input-group ${formRowClasses.row}`\n  }, success ? __jsx(Alert, {\n    classes: alertClasses,\n    severity: \"success\"\n  }, \"Il messaggio \\xE8 stato inviato correttamente\") : null)), loading ? __jsx(Spinner, null) : null);\n}\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}
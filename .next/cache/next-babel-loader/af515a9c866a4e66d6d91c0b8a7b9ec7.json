{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { FormControl, FormControlLabel, Switch, Tooltip } from '@material-ui/core';\nimport { CloudDownload as IconDownload, Link as IconLink, Send as IconSend } from \"@material-ui/icons\";\nimport { CardContainer } from \"./card\";\nimport { getImageUrlByPath } from \"../../helpers/imageHelper\";\nimport ExpandButton from \"../buttons/expandButton\";\nimport dataSetCardStyle from './datasetCard.module.scss';\nimport { forwardRef, useEffect } from \"react\";\nimport { downloadFile } from \"../../helpers/downloadHelper\";\nimport { checkMorphologyForShow } from \"../../helpers/apiHelper\";\n\nfunction _DataSetCard(props, ref) {\n  var _dataSet$download_lin, _dataSet$page_link, _dataSet$source, _getImageUrlByPath, _dataSet$source2, _dataSet$name, _dataSet$species, _dataSet$region, _dataSet$cell_type, _dataSet$secondary_re, _dataSet$physical_int;\n\n  const {\n    dataSet,\n    selectedForDownload,\n    toggleSelectedForDownload,\n    onClick\n  } = props;\n  const [actionsExpanded, setActionsExpanded] = React.useState(false);\n  const [canOpenMorphologyViewer, setCanOpenMorphologyViewer] = React.useState(false);\n  useEffect(() => {\n    _checkIfMorphologyIsVisible();\n  }, []);\n\n  const _openMorphologyViewer = () => {\n    if (!!(props === null || props === void 0 ? void 0 : props.openMorphologyViewer)) {\n      props === null || props === void 0 ? void 0 : props.openMorphologyViewer({\n        modelName: dataSet === null || dataSet === void 0 ? void 0 : dataSet.name,\n        modelUrl: dataSet === null || dataSet === void 0 ? void 0 : dataSet.download_link,\n        detailPage: dataSet === null || dataSet === void 0 ? void 0 : dataSet.page_link\n      });\n    }\n  };\n\n  const _openImageLightbox = url => {\n    if (!!(props === null || props === void 0 ? void 0 : props.openImageLightbox)) {\n      props.openImageLightbox(url);\n    }\n  };\n\n  const _closeImageLightbox = () => {\n    if (!!(props === null || props === void 0 ? void 0 : props.closeImageLightbox)) {\n      props.closeImageLightbox();\n    }\n  };\n\n  const _selectForModelBuilder = () => {\n    if (!!(props === null || props === void 0 ? void 0 : props.selectForModelBuilder)) {\n      props === null || props === void 0 ? void 0 : props.selectForModelBuilder(dataSet);\n    }\n  };\n\n  const _checkIfMorphologyIsVisible = async () => {\n    if (!!hasDownloadLink) {\n      setCanOpenMorphologyViewer(await checkMorphologyForShow(downloadLink));\n    }\n  };\n\n  const downloadLink = (_dataSet$download_lin = dataSet === null || dataSet === void 0 ? void 0 : dataSet.download_link) !== null && _dataSet$download_lin !== void 0 ? _dataSet$download_lin : null;\n  const hasDownloadLink = !!downloadLink;\n  const pageLink = (_dataSet$page_link = dataSet === null || dataSet === void 0 ? void 0 : dataSet.page_link) !== null && _dataSet$page_link !== void 0 ? _dataSet$page_link : null;\n  const hasPageLink = !!pageLink;\n  const hasSource = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source = dataSet.source) === null || _dataSet$source === void 0 ? void 0 : _dataSet$source.trim().length) > 0;\n  const hasImage = !!(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon);\n  const imageUrl = (_getImageUrlByPath = getImageUrlByPath(dataSet === null || dataSet === void 0 ? void 0 : dataSet.icon)) !== null && _getImageUrlByPath !== void 0 ? _getImageUrlByPath : getImageUrlByPath('/assets/images/placeholder.png');\n  const isInternal = hasSource && (dataSet === null || dataSet === void 0 ? void 0 : (_dataSet$source2 = dataSet.source) === null || _dataSet$source2 === void 0 ? void 0 : _dataSet$source2.toLowerCase()) === 'internal';\n  return __jsx(CardContainer, {\n    key: `dataset-${dataSet === null || dataSet === void 0 ? void 0 : dataSet.id}`\n  }, __jsx(\"div\", {\n    className: dataSetCardStyle['dataset-card-content']\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-md-2 col-sm-12\"\n  }, __jsx(\"img\", {\n    src: imageUrl,\n    onClick: () => hasImage ? _openImageLightbox(imageUrl) : null,\n    className: `${dataSetCardStyle['dataset-card-image']} ${!hasImage ? dataSetCardStyle['not-available'] : ''}`\n  })), __jsx(\"div\", {\n    className: `${dataSetCardStyle['dataset-card-main-content']} col-md-7 col-sm-12`\n  }, __jsx(\"div\", {\n    className: `row ${dataSetCardStyle['dataset-card-main-content-inner']}`\n  }, __jsx(\"div\", {\n    className: \"col-md-6 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-label']\n  }, \"Name: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-name-value']\n  }, (_dataSet$name = dataSet === null || dataSet === void 0 ? void 0 : dataSet.name) !== null && _dataSet$name !== void 0 ? _dataSet$name : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-species-label']\n  }, \"Species: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-species-value']\n  }, (_dataSet$species = dataSet === null || dataSet === void 0 ? void 0 : dataSet.species) !== null && _dataSet$species !== void 0 ? _dataSet$species : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-region-label']\n  }, \"Region: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-region-value']\n  }, (_dataSet$region = dataSet === null || dataSet === void 0 ? void 0 : dataSet.region) !== null && _dataSet$region !== void 0 ? _dataSet$region : '')))), __jsx(\"div\", {\n    className: \"col-md-6 col-sm-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-label']\n  }, \"Cell Type: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-cell-type-value']\n  }, (_dataSet$cell_type = dataSet === null || dataSet === void 0 ? void 0 : dataSet.cell_type) !== null && _dataSet$cell_type !== void 0 ? _dataSet$cell_type : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-label']\n  }, \"Secondary Region: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-secondary-region-value']\n  }, (_dataSet$secondary_re = dataSet === null || dataSet === void 0 ? void 0 : dataSet.secondary_region) !== null && _dataSet$secondary_re !== void 0 ? _dataSet$secondary_re : '')), __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-physical-integrity-label']\n  }, \"Physical Integrity: \"), __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-physical-integrity-value']\n  }, (_dataSet$physical_int = dataSet === null || dataSet === void 0 ? void 0 : dataSet.physical_integrity) !== null && _dataSet$physical_int !== void 0 ? _dataSet$physical_int : '')))), __jsx(\"div\", {\n    className: \"col-12 text-right\"\n  }, hasSource ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-source-label']\n  }, \"SOURCE: \", dataSet === null || dataSet === void 0 ? void 0 : dataSet.source) : null))))), __jsx(\"div\", {\n    className: `${dataSetCardStyle['dataset-card-actions-container']} col-md-3 col-sm-12`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-12 text-left\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, hasDownloadLink ? __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, __jsx(FormControl, null, __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      defaultChecked: selectedForDownload,\n      checked: selectedForDownload,\n      onChange: (event, value) => toggleSelectedForDownload(dataSet['source_id'], value)\n    }),\n    label: 'Select for download'\n  }))) : null, __jsx(\"div\", {\n    className: \"col-12 text-center\"\n  }, hasDownloadLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Download\"\n  }, __jsx(ExpandButton, {\n    label: 'Download',\n    icon: __jsx(IconDownload, null),\n    expanded: actionsExpanded,\n    onClick: () => !!(props === null || props === void 0 ? void 0 : props.askForDownload) ? props === null || props === void 0 ? void 0 : props.askForDownload({\n      url: downloadLink,\n      source: dataSet === null || dataSet === void 0 ? void 0 : dataSet.source\n    }) : downloadFile(downloadLink)\n  }))) : null, hasPageLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: isInternal ? 'View on Site (internal)' : 'View on Site'\n  }, __jsx(ExpandButton, {\n    label: isInternal ? 'View on Site (internal)' : 'View on Site',\n    icon: __jsx(IconLink, {\n      htmlColor: isInternal ? '#0F4C81' : '#000'\n    }),\n    expanded: actionsExpanded,\n    onClick: () => window.open(pageLink)\n  }))) : null, hasDownloadLink ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Add to HH Neuron Builder - Cart\"\n  }, __jsx(ExpandButton, {\n    label: 'Add to HH Neuron Builder - Cart',\n    icon: __jsx(IconSend, null),\n    expanded: actionsExpanded,\n    onClick: () => _selectForModelBuilder()\n  }))) : null, hasDownloadLink && canOpenMorphologyViewer ? __jsx(\"span\", {\n    className: dataSetCardStyle['dataset-card-action']\n  }, __jsx(Tooltip, {\n    title: \"Open Morphology Viewer\"\n  }, __jsx(ExpandButton, {\n    label: 'Open Morphology Viewer',\n    icon: __jsx(\"img\", {\n      src: getImageUrlByPath('/assets/icons/3d.svg')\n    }),\n    expanded: actionsExpanded,\n    onClick: () => _openMorphologyViewer()\n  }))) : null))))))));\n}\n\nconst MorphologyCard = /*#__PURE__*/forwardRef((props, ref) => _DataSetCard(props, ref));\nexport { MorphologyCard };","map":null,"metadata":{},"sourceType":"module"}